syntax = "proto3";
package merlion.maker.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "merlion/maker/v1/genesis.proto";
import "merlion/maker/v1/maker.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/merlion-zone/merlion/x/maker/types";

// Query defines the maker gRPC querier service.
service Query {
  // AllBackingRiskParams queries risk params of all the backing pools.
  rpc AllBackingRiskParams(QueryAllBackingRiskParamsRequest)
      returns (QueryAllBackingRiskParamsResponse) {
    option (google.api.http).get = "/merlion/maker/v1/all_backing_risk_params";
  }

  // AllCollateralRiskParams queries risk params of all the collateral pools.
  rpc AllCollateralRiskParams(QueryAllCollateralRiskParamsRequest)
      returns (QueryAllCollateralRiskParamsResponse) {
    option (google.api.http).get =
        "/merlion/maker/v1/all_collateral_risk_params";
  }

  // AllBackingPools queries all the backing pools.
  rpc AllBackingPools(QueryAllBackingPoolsRequest)
      returns (QueryAllBackingPoolsResponse) {
    option (google.api.http).get = "/merlion/maker/v1/all_backing_pools";
  }

  // AllCollateralPools queries all the collateral pools.
  rpc AllCollateralPools(QueryAllCollateralPoolsRequest)
      returns (QueryAllCollateralPoolsResponse) {
    option (google.api.http).get = "/merlion/maker/v1/all_collateral_pools";
  }

  // BackingPool queries a backing pool.
  rpc BackingPool(QueryBackingPoolRequest) returns (QueryBackingPoolResponse) {
    option (google.api.http).get = "/merlion/maker/v1/backing_pool";
  }

  // CollateralPool queries a collateral pool.
  rpc CollateralPool(QueryCollateralPoolRequest)
      returns (QueryCollateralPoolResponse) {
    option (google.api.http).get = "/merlion/maker/v1/collateral_pool";
  }

  // CollateralOfAccount queries the collateral of an account.
  rpc CollateralOfAccount(QueryCollateralOfAccountRequest)
      returns (QueryCollateralOfAccountResponse) {
    option (google.api.http).get = "/merlion/maker/v1/collateral_account";
  }

  // TotalBacking queries the total backing.
  rpc TotalBacking(QueryTotalBackingRequest)
      returns (QueryTotalBackingResponse) {
    option (google.api.http).get = "/merlion/maker/v1/total_backing";
  }

  // TotalCollateral queries the total collateral.
  rpc TotalCollateral(QueryTotalCollateralRequest)
      returns (QueryTotalCollateralResponse) {
    option (google.api.http).get = "/merlion/maker/v1/total_collateral";
  }

  // BackingRatio queries the backing ratio.
  rpc BackingRatio(QueryBackingRatioRequest)
      returns (QueryBackingRatioResponse) {
    option (google.api.http).get = "/merlion/maker/v1/backing_ratio";
  }

  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/merlion/maker/v1/params";
  }

  // EstimateMintBySwapIn estimates input of minting by swap.
  rpc EstimateMintBySwapIn(EstimateMintBySwapInRequest)
      returns (EstimateMintBySwapInResponse) {
    option (google.api.http).get = "/merlion/maker/v1/estimate_mint_by_swap_in";
  }

  // EstimateMintBySwapOut estimates output of minting by swap.
  rpc EstimateMintBySwapOut(EstimateMintBySwapOutRequest)
      returns (EstimateMintBySwapOutResponse) {
    option (google.api.http).get =
        "/merlion/maker/v1/estimate_mint_by_swap_out";
  }

  // EstimateBurnBySwapOut estimates output of burning by swap.
  rpc EstimateBurnBySwapOut(EstimateBurnBySwapOutRequest)
      returns (EstimateBurnBySwapOutResponse) {
    option (google.api.http).get =
        "/merlion/maker/v1/estimate_burn_by_swap_out";
  }

  // EstimateBuyBackingOut estimates output of buying backing assets.
  rpc EstimateBuyBackingOut(EstimateBuyBackingOutRequest)
      returns (EstimateBuyBackingOutResponse) {
    option (google.api.http).get = "/merlion/maker/v1/estimate_buy_backing_out";
  }

  // EstimateSellBackingOut estimates output of selling backing assets.
  rpc EstimateSellBackingOut(EstimateSellBackingOutRequest)
      returns (EstimateSellBackingOutResponse) {
    option (google.api.http).get =
        "/merlion/maker/v1/estimate_sell_backing_out";
  }

  // EstimateMintByCollateralIn estimates input of minting by collateral.
  rpc EstimateMintByCollateralIn(EstimateMintByCollateralInRequest)
      returns (EstimateMintByCollateralInResponse) {
    option (google.api.http).get =
        "/merlion/maker/v1/estimate_mint_by_collateral_in";
  }
}

message QueryAllBackingRiskParamsRequest {}

message QueryAllBackingRiskParamsResponse {
  repeated BackingRiskParams risk_params = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllCollateralRiskParamsRequest {}

message QueryAllCollateralRiskParamsResponse {
  repeated CollateralRiskParams risk_params = 1
      [ (gogoproto.nullable) = false ];
}

message QueryAllBackingPoolsRequest {}

message QueryAllBackingPoolsResponse {
  repeated PoolBacking backing_pools = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllCollateralPoolsRequest {}

message QueryAllCollateralPoolsResponse {
  repeated PoolCollateral collateral_pools = 1 [ (gogoproto.nullable) = false ];
}

message QueryBackingPoolRequest { string backing_denom = 1; }

message QueryBackingPoolResponse {
  PoolBacking backing_pool = 1 [ (gogoproto.nullable) = false ];
}

message QueryCollateralPoolRequest { string collateral_denom = 1; }

message QueryCollateralPoolResponse {
  PoolCollateral collateral_pool = 1 [ (gogoproto.nullable) = false ];
}

message QueryCollateralOfAccountRequest {
  string account = 1;
  string collateral_denom = 2;
}

message QueryCollateralOfAccountResponse {
  AccountCollateral account_collateral = 1 [ (gogoproto.nullable) = false ];
}

message QueryTotalBackingRequest {}

message QueryTotalBackingResponse {
  TotalBacking total_backing = 1 [ (gogoproto.nullable) = false ];
}

message QueryTotalCollateralRequest {}

message QueryTotalCollateralResponse {
  TotalCollateral total_collateral = 1 [ (gogoproto.nullable) = false ];
}

message QueryBackingRatioRequest {}

message QueryBackingRatioResponse {
  string backing_ratio = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  int64 last_update_block = 2;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message EstimateMintBySwapInRequest {
  cosmos.base.v1beta1.Coin mint_out = 1 [ (gogoproto.nullable) = false ];
  string backing_denom = 2;
  bool full_backing = 3;
}

message EstimateMintBySwapInResponse {
  cosmos.base.v1beta1.Coin backing_in = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin lion_in = 2 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin mint_fee = 3 [ (gogoproto.nullable) = false ];
}

message EstimateMintBySwapOutRequest {
  cosmos.base.v1beta1.Coin backing_in_max = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin lion_in_max = 2 [ (gogoproto.nullable) = false ];
  bool full_backing = 3;
}

message EstimateMintBySwapOutResponse {
  cosmos.base.v1beta1.Coin backing_in = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin lion_in = 2 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin mint_out = 3 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin mint_fee = 4 [ (gogoproto.nullable) = false ];
}

message EstimateBurnBySwapOutRequest {
  cosmos.base.v1beta1.Coin burn_in = 1 [ (gogoproto.nullable) = false ];
  string backing_denom = 2;
}

message EstimateBurnBySwapOutResponse {
  cosmos.base.v1beta1.Coin backing_out = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin lion_out = 2 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin burn_fee = 3 [ (gogoproto.nullable) = false ];
}

message EstimateBuyBackingOutRequest {
  cosmos.base.v1beta1.Coin lion_in = 1 [ (gogoproto.nullable) = false ];
  string backing_denom = 2;
}

message EstimateBuyBackingOutResponse {
  cosmos.base.v1beta1.Coin backing_out = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin buyback_fee = 2 [ (gogoproto.nullable) = false ];
}

message EstimateSellBackingOutRequest {
  cosmos.base.v1beta1.Coin backing_in = 1 [ (gogoproto.nullable) = false ];
}

message EstimateSellBackingOutResponse {
  cosmos.base.v1beta1.Coin lion_out = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin sellback_fee = 2 [ (gogoproto.nullable) = false ];
}

message EstimateMintByCollateralInRequest {
  string sender = 1;
  cosmos.base.v1beta1.Coin mint_out = 2 [ (gogoproto.nullable) = false ];
  string collateral_denom = 3;
  cosmos.base.v1beta1.Coin lion_in_max = 4 [ (gogoproto.nullable) = false ];
}

message EstimateMintByCollateralInResponse {
  cosmos.base.v1beta1.Coin lion_in = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin mint_fee = 2 [ (gogoproto.nullable) = false ];
  merlion.maker.v1.TotalCollateral total_coll = 3
      [ (gogoproto.nullable) = false ];
  merlion.maker.v1.PoolCollateral pool_coll = 4
      [ (gogoproto.nullable) = false ];
  merlion.maker.v1.AccountCollateral acc_coll = 5
      [ (gogoproto.nullable) = false ];
}
