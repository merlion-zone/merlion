syntax = "proto3";
package merlion.maker.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/merlion-zone/merlion/x/maker/types";

// BackingRiskParams represents an object of backing coin risk parameters.
message BackingRiskParams {
  option (gogoproto.equal) = false;

  // backing coin denom
  string backing_denom = 1;
  // whether enabled
  bool enabled = 2;
  // maximum total backing amount
  string max_backing = 3
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int" ];
  // maximum mintable Mer amount
  string max_mer_mint = 4
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int" ];
  // mint fee rate
  string mint_fee = 5
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];
  // burn fee rate
  string burn_fee = 6
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];
  // buyback fee rate
  string buyback_fee = 7
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];
  // reback fee rate
  string reback_fee = 8
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];
}

// CollateralRiskParams represents an object of collateral risk parameters.
message CollateralRiskParams {
  option (gogoproto.equal) = false;

  // collateral coin denom
  string collateral_denom = 1;
  // whether enabled
  bool enabled = 2;
  // maximum total collateral amount; empty means no limit
  string max_collateral = 3
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int" ];
  // maximum total mintable Mer amount; empty means no limit
  string max_mer_mint = 4
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int" ];
  // ratio at which a position is defined as undercollateralized
  string liquidation_threshold = 5
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];
  // maximum ratio of maximum amount of currency that can be borrowed with a
  // specific collateral
  string loan_to_value = 6
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];
  // basic ratio of maximum amount of currency that can be borrowed with a
  // specific collateral
  string basic_loan_to_value = 7
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];
  // catalytic ratio of collateralized Lion to asset, to maximize the LTV
  // in [basic-LTV, LTV]
  string catalytic_lion_ratio = 8
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];
  // liquidation fee rate, i.e., the discount a liquidator gets when buying
  // collateral flagged for a liquidation
  string liquidation_fee = 9
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];
  // mint fee rate, i.e., extra fee debt
  string mint_fee = 10
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];
  // annual interest fee rate (APR)
  string interest_fee = 11
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];
}

// RegisterBackingProposal is a gov Content type to register eligible
// strong-backing asset with backing risk parameters.
message RegisterBackingProposal {
  option (gogoproto.equal) = false;

  // title of the proposal
  string title = 1;
  // proposal description
  string description = 2;
  // backing risk params
  BackingRiskParams risk_params = 3 [ (gogoproto.nullable) = false ];
}

// RegisterCollateralProposal is a gov Content type to register eligible
// collateral with collateral risk parameters.
message RegisterCollateralProposal {
  option (gogoproto.equal) = false;

  // title of the proposal
  string title = 1;
  // proposal description
  string description = 2;
  // collateral risk params
  CollateralRiskParams risk_params = 3 [ (gogoproto.nullable) = false ];
}

// SetBackingRiskParamsProposal is a gov Content type to set backing coin risk
// parameters.
message SetBackingRiskParamsProposal {
  option (gogoproto.equal) = false;

  // title of the proposal
  string title = 1;
  // proposal description
  string description = 2;
  // backing risk params
  BackingRiskParams risk_params = 3 [ (gogoproto.nullable) = false ];
}

// SetCollateralRiskParamsProposal is a gov Content type to set collateral risk
// parameters.
message SetCollateralRiskParamsProposal {
  option (gogoproto.equal) = false;

  // title of the proposal
  string title = 1;
  // proposal description
  string description = 2;
  // collateral risk params
  CollateralRiskParams risk_params = 3 [ (gogoproto.nullable) = false ];
}

message BatchBackingRiskParams {
  option (gogoproto.equal) = false;

  // batch of collateral risk params
  repeated BackingRiskParams risk_params = 1 [ (gogoproto.nullable) = false ];
}

// BatchSetBackingRiskParamsProposal is a gov Content type to batch set backing
// coin risk parameters.
message BatchSetBackingRiskParamsProposal {
  option (gogoproto.equal) = false;

  // title of the proposal
  string title = 1;
  // proposal description
  string description = 2;
  // batch of collateral risk params
  repeated BackingRiskParams risk_params = 3 [ (gogoproto.nullable) = false ];
}

message BatchCollateralRiskParams {
  option (gogoproto.equal) = false;

  // batch of collateral risk params
  repeated CollateralRiskParams risk_params = 1
      [ (gogoproto.nullable) = false ];
}

// BatchSetCollateralRiskParamsProposal is a gov Content type to batch set
// collateral risk parameters.
message BatchSetCollateralRiskParamsProposal {
  option (gogoproto.equal) = false;

  // title of the proposal
  string title = 1;
  // proposal description
  string description = 2;
  // batch of collateral risk params
  repeated CollateralRiskParams risk_params = 3
      [ (gogoproto.nullable) = false ];
}

message TotalBacking {
  option (gogoproto.equal) = false;

  // total backing value in uUSD
  string backing_value = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // total minted mer; negative value means burned mer
  cosmos.base.v1beta1.Coin mer_minted = 2 [ (gogoproto.nullable) = false ];
  // total burned lion; negative value means minted lion
  cosmos.base.v1beta1.Coin lion_burned = 3 [ (gogoproto.nullable) = false ];
}

message PoolBacking {
  option (gogoproto.equal) = false;

  // total minted mer; negative value means burned mer
  cosmos.base.v1beta1.Coin mer_minted = 1 [ (gogoproto.nullable) = false ];
  // total backing
  cosmos.base.v1beta1.Coin backing = 2 [ (gogoproto.nullable) = false ];
  // total burned lion; negative value means minted lion
  cosmos.base.v1beta1.Coin lion_burned = 3 [ (gogoproto.nullable) = false ];
}

message AccountBacking { option (gogoproto.equal) = false; }

message TotalCollateral {
  option (gogoproto.equal) = false;

  // total existing mer debt, including minted by collateral, mint fee, last
  // interest
  cosmos.base.v1beta1.Coin mer_debt = 1 [ (gogoproto.nullable) = false ];
  // total collateralized lion
  cosmos.base.v1beta1.Coin lion_collateralized = 2
      [ (gogoproto.nullable) = false ];
}

message PoolCollateral {
  option (gogoproto.equal) = false;

  // total collateral
  cosmos.base.v1beta1.Coin collateral = 1 [ (gogoproto.nullable) = false ];
  // total existing mer debt, including minted by collateral, mint fee, last
  // interest
  cosmos.base.v1beta1.Coin mer_debt = 2 [ (gogoproto.nullable) = false ];
  // total collateralized lion
  cosmos.base.v1beta1.Coin lion_collateralized = 3
      [ (gogoproto.nullable) = false ];
}

message AccountCollateral {
  option (gogoproto.equal) = false;

  // account who owns collateral
  string account = 1;
  // existing collateral
  cosmos.base.v1beta1.Coin collateral = 2 [ (gogoproto.nullable) = false ];
  // remaining mer debt, including minted by collateral, mint fee, last interest
  cosmos.base.v1beta1.Coin mer_debt = 3 [ (gogoproto.nullable) = false ];
  // total collateralized lion
  cosmos.base.v1beta1.Coin lion_collateralized = 4
      [ (gogoproto.nullable) = false ];
  // remaining interest debt after last settlement
  cosmos.base.v1beta1.Coin last_interest = 5 [ (gogoproto.nullable) = false ];
  // the block of last settlement
  int64 last_settlement_block = 6;
}
