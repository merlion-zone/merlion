syntax = "proto3";
package multigravity.v1;

import "gravity/v1/genesis.proto";
import "gravity/v1/types.proto";
import "gravity/v1/msgs.proto";
import "gravity/v1/query.proto";
import "gravity/v1/pool.proto";
import "gravity/v1/batch.proto";
import "gravity/v1/attestation.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/Gravity-Bridge/Gravity-Bridge/module/x/multigravity/types";

// Query defines the gRPC querier service
service Query {
  rpc Chains(QueryChainsRequest) returns (QueryChainsResponse) {
    option (google.api.http).get = "/multigravity/v1beta/params";
  }
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/multigravity/v1beta/params";
  }
  rpc CurrentValset(QueryCurrentValsetRequest) returns (QueryCurrentValsetResponse) {
    option (google.api.http).get = "/multigravity/v1beta/valset/current";
  }
  rpc ValsetRequest(QueryValsetRequestRequest) returns (QueryValsetRequestResponse) {
    option (google.api.http).get = "/multigravity/v1beta/valset";
  }
  rpc ValsetConfirm(QueryValsetConfirmRequest) returns (QueryValsetConfirmResponse) {
    option (google.api.http).get = "/multigravity/v1beta/valset/confirm";
  }
  rpc ValsetConfirmsByNonce(QueryValsetConfirmsByNonceRequest) returns (QueryValsetConfirmsByNonceResponse) {
    option (google.api.http).get = "/multigravity/v1beta/confirms/{nonce}";
  }
  rpc LastValsetRequests(QueryLastValsetRequestsRequest) returns (QueryLastValsetRequestsResponse) {
    option (google.api.http).get = "/multigravity/v1beta/valset/requests";
  }
  rpc LastPendingValsetRequestByAddr(QueryLastPendingValsetRequestByAddrRequest)
      returns (QueryLastPendingValsetRequestByAddrResponse) {
    option (google.api.http).get = "/multigravity/v1beta/valset/last";
  }
  rpc LastPendingBatchRequestByAddr(QueryLastPendingBatchRequestByAddrRequest)
      returns (QueryLastPendingBatchRequestByAddrResponse) {
    option (google.api.http).get = "/multigravity/v1beta/batch/last_pending_request_by_addr";
  }
  rpc LastPendingLogicCallByAddr(QueryLastPendingLogicCallByAddrRequest)
      returns (QueryLastPendingLogicCallByAddrResponse) {
    option (google.api.http).get = "/multigravity/v1beta/logic/{address}";
  }
  rpc LastEventNonceByAddr(QueryLastEventNonceByAddrRequest) returns (QueryLastEventNonceByAddrResponse) {
    option (google.api.http).get = "/gravity/v1beta/oracle/eventnonce/{address}";
  }
  rpc BatchFees(QueryBatchFeeRequest) returns (QueryBatchFeeResponse) {
    option (google.api.http).get = "/multigravity/v1beta/batchfees";
  }
  rpc OutgoingTxBatches(QueryOutgoingTxBatchesRequest) returns (QueryOutgoingTxBatchesResponse) {
    option (google.api.http).get = "/multigravity/v1beta/batch/outgoingtx";
  }
  rpc OutgoingLogicCalls(QueryOutgoingLogicCallsRequest) returns (QueryOutgoingLogicCallsResponse) {
    option (google.api.http).get = "/multigravity/v1beta/batch/outgoinglogic";
  }
  rpc BatchRequestByNonce(QueryBatchRequestByNonceRequest) returns (QueryBatchRequestByNonceResponse) {
    option (google.api.http).get = "/multigravity/v1beta/batch/request_by_nonce";
  }
  rpc BatchConfirms(QueryBatchConfirmsRequest) returns (QueryBatchConfirmsResponse) {
    option (google.api.http).get = "/multigravity/v1beta/batch/confirms";
  }
  rpc LogicConfirms(QueryLogicConfirmsRequest) returns (QueryLogicConfirmsResponse) {
    option (google.api.http).get = "/multigravity/v1beta/logic/confirms";
  }
  rpc ERC20ToDenom(QueryERC20ToDenomRequest) returns (QueryERC20ToDenomResponse) {
    option (google.api.http).get = "/multigravity/v1beta/cosmos_originated/erc20_to_denom";
  }
  rpc DenomToERC20(QueryDenomToERC20Request) returns (QueryDenomToERC20Response) {
    option (google.api.http).get = "/multigravity/v1beta/cosmos_originated/denom_to_erc20";
  }
  rpc GetAttestations(QueryAttestationsRequest) returns (QueryAttestationsResponse) {
    option (google.api.http).get = "/multigravity/v1beta/query_attestations";
  }
  rpc GetDelegateKeyByValidator(gravity.v1.QueryDelegateKeysByValidatorAddress)
      returns (gravity.v1.QueryDelegateKeysByValidatorAddressResponse) {
    option (google.api.http).get = "/multigravity/v1beta/query_delegate_keys_by_validator";
  }
  rpc GetDelegateKeyByEth(gravity.v1.QueryDelegateKeysByEthAddress) returns (gravity.v1.QueryDelegateKeysByEthAddressResponse) {
    option (google.api.http).get = "/multigravity/v1beta/query_delegate_keys_by_eth";
  }
  rpc GetDelegateKeyByOrchestrator(gravity.v1.QueryDelegateKeysByOrchestratorAddress)
      returns (gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse) {
    option (google.api.http).get = "/multigravity/v1beta/query_delegate_keys_by_orchestrator";
  }

  rpc GetPendingSendToEth(QueryPendingSendToEth) returns (QueryPendingSendToEthResponse) {
    option (google.api.http).get = "/multigravity/v1beta/query_pending_send_to_eth";
  }
  rpc GetPendingIbcAutoForwards(QueryPendingIbcAutoForwards) returns (QueryPendingIbcAutoForwardsResponse) {
    option (google.api.http).get = "/multigravity/v1beta/query_pending_ibc_auto_forwards";
  }
}

message QueryChainsRequest {}
message QueryChainsResponse {
  repeated string chain_identifiers = 1;
}

message QueryParamsRequest {
  string chain_identifier = 1;
}
message QueryParamsResponse {
  gravity.v1.Params params = 1 [(gogoproto.nullable) = false];
}

message QueryCurrentValsetRequest {
  string chain_identifier = 1;
}
message QueryCurrentValsetResponse {
  gravity.v1.Valset valset = 1 [(gogoproto.nullable) = false];
}

message QueryValsetRequestRequest {
  uint64 nonce = 1;
  string chain_identifier = 2;
}
message QueryValsetRequestResponse {
  gravity.v1.Valset valset = 1;
}

message QueryValsetConfirmRequest {
  uint64 nonce = 1;
  string address = 2;
  string chain_identifier = 3;
}
message QueryValsetConfirmResponse {
  gravity.v1.MsgValsetConfirm confirm = 1;
}

message QueryValsetConfirmsByNonceRequest {
  uint64 nonce = 1;
  string chain_identifier = 2;
}
message QueryValsetConfirmsByNonceResponse {
  repeated gravity.v1.MsgValsetConfirm confirms = 1 [(gogoproto.nullable) = false];
}

message QueryLastValsetRequestsRequest {
  string chain_identifier = 1;
}
message QueryLastValsetRequestsResponse {
  repeated gravity.v1.Valset valsets = 1 [(gogoproto.nullable) = false];
}

message QueryLastPendingValsetRequestByAddrRequest {
  string address = 1;
  string chain_identifier = 2;
}
message QueryLastPendingValsetRequestByAddrResponse {
  repeated gravity.v1.Valset valsets = 1 [(gogoproto.nullable) = false];
}

message QueryBatchFeeRequest {
  string chain_identifier = 1;
}
message QueryBatchFeeResponse {
  repeated gravity.v1.BatchFees batch_fees = 1 [(gogoproto.nullable) = false];
}

message QueryLastPendingBatchRequestByAddrRequest {
  string address = 1;
  string chain_identifier = 2;
}
message QueryLastPendingBatchRequestByAddrResponse {
  repeated gravity.v1.OutgoingTxBatch batch = 1 [(gogoproto.nullable) = false];
}

message QueryLastPendingLogicCallByAddrRequest {
  string address = 1;
  string chain_identifier = 2;
}
message QueryLastPendingLogicCallByAddrResponse {
  repeated gravity.v1.OutgoingLogicCall call = 1 [(gogoproto.nullable) = false];
}

message QueryOutgoingTxBatchesRequest {
  string chain_identifier = 1;
}
message QueryOutgoingTxBatchesResponse {
  repeated gravity.v1.OutgoingTxBatch batches = 1 [(gogoproto.nullable) = false];
}

message QueryOutgoingLogicCallsRequest {
  string chain_identifier = 1;
}
message QueryOutgoingLogicCallsResponse {
  repeated gravity.v1.OutgoingLogicCall calls = 1 [(gogoproto.nullable) = false];
}

message QueryBatchRequestByNonceRequest {
  uint64 nonce = 1;
  string contract_address = 2;
  string chain_identifier = 3;
}
message QueryBatchRequestByNonceResponse {
  gravity.v1.OutgoingTxBatch batch = 1 [(gogoproto.nullable) = false];
}

message QueryBatchConfirmsRequest {
  uint64 nonce = 1;
  string contract_address = 2;
  string chain_identifier = 3;
}
message QueryBatchConfirmsResponse {
  repeated gravity.v1.MsgConfirmBatch confirms = 1 [(gogoproto.nullable) = false];
}

message QueryLogicConfirmsRequest {
  bytes  invalidation_id = 1;
  uint64 invalidation_nonce = 2;
  string chain_identifier = 3;
}
message QueryLogicConfirmsResponse {
  repeated gravity.v1.MsgConfirmLogicCall confirms = 1 [(gogoproto.nullable) = false];
}

message QueryLastEventNonceByAddrRequest {
  string address = 1;
  string chain_identifier = 2;
}
message QueryLastEventNonceByAddrResponse {
  uint64 event_nonce = 1;
}

message QueryERC20ToDenomRequest {
  string erc20 = 1;
  string chain_identifier = 2;
}
message QueryERC20ToDenomResponse {
  string denom = 1;
  bool   cosmos_originated = 2;
}

message QueryDenomToERC20Request {
  string denom = 1;
  string chain_identifier = 2;
}
message QueryDenomToERC20Response {
  string erc20 = 1;
  bool   cosmos_originated = 2;
}

// QueryAttestationsRequest defines the request structure for getting recent
// attestations with optional query parameters. By default, a limited set of
// recent attestations will be returned, defined by 'limit'. These attestations
// can be ordered ascending or descending by nonce, that defaults to ascending.
// Filtering criteria may also be provided, including nonce, claim type, and
// height. Note, that an attestation will be returned if it matches ANY of the
// filter query parameters provided.
message QueryAttestationsRequest {
  // limit defines how many attestations to limit in the response.
  uint64 limit = 1;
  // order_by provides ordering of atteststions by nonce in the response. Either
  // 'asc' or 'desc' can be provided. If no value is provided, it defaults to
  // 'asc'.
  string order_by = 2;
  // claim_type allows filtering attestations by Ethereum claim type.
  string claim_type = 3;
  // nonce allows filtering attestations by Ethereum claim nonce.
  uint64 nonce = 4;
  // height allows filtering attestations by Ethereum claim height.
  uint64 height = 5;
  string chain_identifier = 6;
}
message QueryAttestationsResponse {
  repeated gravity.v1.Attestation attestations = 1 [(gogoproto.nullable) = false];
}

message QueryPendingSendToEth {
  string sender_address = 1;
  string chain_identifier = 2;
}
message QueryPendingSendToEthResponse {
  repeated gravity.v1.OutgoingTransferTx transfers_in_batches = 1 [(gogoproto.nullable) = false];
  repeated gravity.v1.OutgoingTransferTx unbatched_transfers = 2 [(gogoproto.nullable) = false];
}

message QueryPendingIbcAutoForwards{
  // limit defines the number of pending forwards to return, in order of their SendToCosmos.EventNonce
  uint64 limit = 1;
  string chain_identifier = 2;
}
message QueryPendingIbcAutoForwardsResponse{
  repeated gravity.v1.PendingIbcAutoForward pending_ibc_auto_forwards = 1;
}
