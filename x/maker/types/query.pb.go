// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: merlion/maker/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryAllBackingRiskParamsRequest struct {
}

func (m *QueryAllBackingRiskParamsRequest) Reset()         { *m = QueryAllBackingRiskParamsRequest{} }
func (m *QueryAllBackingRiskParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBackingRiskParamsRequest) ProtoMessage()    {}
func (*QueryAllBackingRiskParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{0}
}
func (m *QueryAllBackingRiskParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBackingRiskParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBackingRiskParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBackingRiskParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBackingRiskParamsRequest.Merge(m, src)
}
func (m *QueryAllBackingRiskParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBackingRiskParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBackingRiskParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBackingRiskParamsRequest proto.InternalMessageInfo

type QueryAllBackingRiskParamsResponse struct {
	RiskParams []BackingRiskParams `protobuf:"bytes,1,rep,name=risk_params,json=riskParams,proto3" json:"risk_params"`
}

func (m *QueryAllBackingRiskParamsResponse) Reset()         { *m = QueryAllBackingRiskParamsResponse{} }
func (m *QueryAllBackingRiskParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBackingRiskParamsResponse) ProtoMessage()    {}
func (*QueryAllBackingRiskParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{1}
}
func (m *QueryAllBackingRiskParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBackingRiskParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBackingRiskParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBackingRiskParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBackingRiskParamsResponse.Merge(m, src)
}
func (m *QueryAllBackingRiskParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBackingRiskParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBackingRiskParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBackingRiskParamsResponse proto.InternalMessageInfo

func (m *QueryAllBackingRiskParamsResponse) GetRiskParams() []BackingRiskParams {
	if m != nil {
		return m.RiskParams
	}
	return nil
}

type QueryAllCollateralRiskParamsRequest struct {
}

func (m *QueryAllCollateralRiskParamsRequest) Reset()         { *m = QueryAllCollateralRiskParamsRequest{} }
func (m *QueryAllCollateralRiskParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCollateralRiskParamsRequest) ProtoMessage()    {}
func (*QueryAllCollateralRiskParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{2}
}
func (m *QueryAllCollateralRiskParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCollateralRiskParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCollateralRiskParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCollateralRiskParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCollateralRiskParamsRequest.Merge(m, src)
}
func (m *QueryAllCollateralRiskParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCollateralRiskParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCollateralRiskParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCollateralRiskParamsRequest proto.InternalMessageInfo

type QueryAllCollateralRiskParamsResponse struct {
	RiskParams []CollateralRiskParams `protobuf:"bytes,1,rep,name=risk_params,json=riskParams,proto3" json:"risk_params"`
}

func (m *QueryAllCollateralRiskParamsResponse) Reset()         { *m = QueryAllCollateralRiskParamsResponse{} }
func (m *QueryAllCollateralRiskParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCollateralRiskParamsResponse) ProtoMessage()    {}
func (*QueryAllCollateralRiskParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{3}
}
func (m *QueryAllCollateralRiskParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCollateralRiskParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCollateralRiskParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCollateralRiskParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCollateralRiskParamsResponse.Merge(m, src)
}
func (m *QueryAllCollateralRiskParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCollateralRiskParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCollateralRiskParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCollateralRiskParamsResponse proto.InternalMessageInfo

func (m *QueryAllCollateralRiskParamsResponse) GetRiskParams() []CollateralRiskParams {
	if m != nil {
		return m.RiskParams
	}
	return nil
}

type QueryAllBackingPoolsRequest struct {
}

func (m *QueryAllBackingPoolsRequest) Reset()         { *m = QueryAllBackingPoolsRequest{} }
func (m *QueryAllBackingPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBackingPoolsRequest) ProtoMessage()    {}
func (*QueryAllBackingPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{4}
}
func (m *QueryAllBackingPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBackingPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBackingPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBackingPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBackingPoolsRequest.Merge(m, src)
}
func (m *QueryAllBackingPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBackingPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBackingPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBackingPoolsRequest proto.InternalMessageInfo

type QueryAllBackingPoolsResponse struct {
	BackingPools []PoolBacking `protobuf:"bytes,1,rep,name=backing_pools,json=backingPools,proto3" json:"backing_pools"`
}

func (m *QueryAllBackingPoolsResponse) Reset()         { *m = QueryAllBackingPoolsResponse{} }
func (m *QueryAllBackingPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBackingPoolsResponse) ProtoMessage()    {}
func (*QueryAllBackingPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{5}
}
func (m *QueryAllBackingPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBackingPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBackingPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBackingPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBackingPoolsResponse.Merge(m, src)
}
func (m *QueryAllBackingPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBackingPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBackingPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBackingPoolsResponse proto.InternalMessageInfo

func (m *QueryAllBackingPoolsResponse) GetBackingPools() []PoolBacking {
	if m != nil {
		return m.BackingPools
	}
	return nil
}

type QueryAllCollateralPoolsRequest struct {
}

func (m *QueryAllCollateralPoolsRequest) Reset()         { *m = QueryAllCollateralPoolsRequest{} }
func (m *QueryAllCollateralPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCollateralPoolsRequest) ProtoMessage()    {}
func (*QueryAllCollateralPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{6}
}
func (m *QueryAllCollateralPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCollateralPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCollateralPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCollateralPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCollateralPoolsRequest.Merge(m, src)
}
func (m *QueryAllCollateralPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCollateralPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCollateralPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCollateralPoolsRequest proto.InternalMessageInfo

type QueryAllCollateralPoolsResponse struct {
	CollateralPools []PoolCollateral `protobuf:"bytes,1,rep,name=collateral_pools,json=collateralPools,proto3" json:"collateral_pools"`
}

func (m *QueryAllCollateralPoolsResponse) Reset()         { *m = QueryAllCollateralPoolsResponse{} }
func (m *QueryAllCollateralPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCollateralPoolsResponse) ProtoMessage()    {}
func (*QueryAllCollateralPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{7}
}
func (m *QueryAllCollateralPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCollateralPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCollateralPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCollateralPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCollateralPoolsResponse.Merge(m, src)
}
func (m *QueryAllCollateralPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCollateralPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCollateralPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCollateralPoolsResponse proto.InternalMessageInfo

func (m *QueryAllCollateralPoolsResponse) GetCollateralPools() []PoolCollateral {
	if m != nil {
		return m.CollateralPools
	}
	return nil
}

type QueryBackingPoolRequest struct {
	BackingDenom string `protobuf:"bytes,1,opt,name=backing_denom,json=backingDenom,proto3" json:"backing_denom,omitempty"`
}

func (m *QueryBackingPoolRequest) Reset()         { *m = QueryBackingPoolRequest{} }
func (m *QueryBackingPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBackingPoolRequest) ProtoMessage()    {}
func (*QueryBackingPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{8}
}
func (m *QueryBackingPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBackingPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBackingPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBackingPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBackingPoolRequest.Merge(m, src)
}
func (m *QueryBackingPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBackingPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBackingPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBackingPoolRequest proto.InternalMessageInfo

func (m *QueryBackingPoolRequest) GetBackingDenom() string {
	if m != nil {
		return m.BackingDenom
	}
	return ""
}

type QueryBackingPoolResponse struct {
	BackingPool PoolBacking `protobuf:"bytes,1,opt,name=backing_pool,json=backingPool,proto3" json:"backing_pool"`
}

func (m *QueryBackingPoolResponse) Reset()         { *m = QueryBackingPoolResponse{} }
func (m *QueryBackingPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBackingPoolResponse) ProtoMessage()    {}
func (*QueryBackingPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{9}
}
func (m *QueryBackingPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBackingPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBackingPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBackingPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBackingPoolResponse.Merge(m, src)
}
func (m *QueryBackingPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBackingPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBackingPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBackingPoolResponse proto.InternalMessageInfo

func (m *QueryBackingPoolResponse) GetBackingPool() PoolBacking {
	if m != nil {
		return m.BackingPool
	}
	return PoolBacking{}
}

type QueryCollateralPoolRequest struct {
	CollateralDenom string `protobuf:"bytes,1,opt,name=collateral_denom,json=collateralDenom,proto3" json:"collateral_denom,omitempty"`
}

func (m *QueryCollateralPoolRequest) Reset()         { *m = QueryCollateralPoolRequest{} }
func (m *QueryCollateralPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollateralPoolRequest) ProtoMessage()    {}
func (*QueryCollateralPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{10}
}
func (m *QueryCollateralPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollateralPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollateralPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollateralPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollateralPoolRequest.Merge(m, src)
}
func (m *QueryCollateralPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollateralPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollateralPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollateralPoolRequest proto.InternalMessageInfo

func (m *QueryCollateralPoolRequest) GetCollateralDenom() string {
	if m != nil {
		return m.CollateralDenom
	}
	return ""
}

type QueryCollateralPoolResponse struct {
	CollateralPool PoolCollateral `protobuf:"bytes,1,opt,name=collateral_pool,json=collateralPool,proto3" json:"collateral_pool"`
}

func (m *QueryCollateralPoolResponse) Reset()         { *m = QueryCollateralPoolResponse{} }
func (m *QueryCollateralPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCollateralPoolResponse) ProtoMessage()    {}
func (*QueryCollateralPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{11}
}
func (m *QueryCollateralPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollateralPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollateralPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollateralPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollateralPoolResponse.Merge(m, src)
}
func (m *QueryCollateralPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollateralPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollateralPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollateralPoolResponse proto.InternalMessageInfo

func (m *QueryCollateralPoolResponse) GetCollateralPool() PoolCollateral {
	if m != nil {
		return m.CollateralPool
	}
	return PoolCollateral{}
}

type QueryCollateralOfAccountRequest struct {
	Account         string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	CollateralDenom string `protobuf:"bytes,2,opt,name=collateral_denom,json=collateralDenom,proto3" json:"collateral_denom,omitempty"`
}

func (m *QueryCollateralOfAccountRequest) Reset()         { *m = QueryCollateralOfAccountRequest{} }
func (m *QueryCollateralOfAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollateralOfAccountRequest) ProtoMessage()    {}
func (*QueryCollateralOfAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{12}
}
func (m *QueryCollateralOfAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollateralOfAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollateralOfAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollateralOfAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollateralOfAccountRequest.Merge(m, src)
}
func (m *QueryCollateralOfAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollateralOfAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollateralOfAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollateralOfAccountRequest proto.InternalMessageInfo

func (m *QueryCollateralOfAccountRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *QueryCollateralOfAccountRequest) GetCollateralDenom() string {
	if m != nil {
		return m.CollateralDenom
	}
	return ""
}

type QueryCollateralOfAccountResponse struct {
	AccountCollateral AccountCollateral `protobuf:"bytes,1,opt,name=account_collateral,json=accountCollateral,proto3" json:"account_collateral"`
}

func (m *QueryCollateralOfAccountResponse) Reset()         { *m = QueryCollateralOfAccountResponse{} }
func (m *QueryCollateralOfAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCollateralOfAccountResponse) ProtoMessage()    {}
func (*QueryCollateralOfAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{13}
}
func (m *QueryCollateralOfAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollateralOfAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollateralOfAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollateralOfAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollateralOfAccountResponse.Merge(m, src)
}
func (m *QueryCollateralOfAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollateralOfAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollateralOfAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollateralOfAccountResponse proto.InternalMessageInfo

func (m *QueryCollateralOfAccountResponse) GetAccountCollateral() AccountCollateral {
	if m != nil {
		return m.AccountCollateral
	}
	return AccountCollateral{}
}

type QueryTotalBackingRequest struct {
}

func (m *QueryTotalBackingRequest) Reset()         { *m = QueryTotalBackingRequest{} }
func (m *QueryTotalBackingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalBackingRequest) ProtoMessage()    {}
func (*QueryTotalBackingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{14}
}
func (m *QueryTotalBackingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalBackingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalBackingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalBackingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalBackingRequest.Merge(m, src)
}
func (m *QueryTotalBackingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalBackingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalBackingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalBackingRequest proto.InternalMessageInfo

type QueryTotalBackingResponse struct {
	TotalBacking TotalBacking `protobuf:"bytes,1,opt,name=total_backing,json=totalBacking,proto3" json:"total_backing"`
}

func (m *QueryTotalBackingResponse) Reset()         { *m = QueryTotalBackingResponse{} }
func (m *QueryTotalBackingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalBackingResponse) ProtoMessage()    {}
func (*QueryTotalBackingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{15}
}
func (m *QueryTotalBackingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalBackingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalBackingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalBackingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalBackingResponse.Merge(m, src)
}
func (m *QueryTotalBackingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalBackingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalBackingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalBackingResponse proto.InternalMessageInfo

func (m *QueryTotalBackingResponse) GetTotalBacking() TotalBacking {
	if m != nil {
		return m.TotalBacking
	}
	return TotalBacking{}
}

type QueryTotalCollateralRequest struct {
}

func (m *QueryTotalCollateralRequest) Reset()         { *m = QueryTotalCollateralRequest{} }
func (m *QueryTotalCollateralRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalCollateralRequest) ProtoMessage()    {}
func (*QueryTotalCollateralRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{16}
}
func (m *QueryTotalCollateralRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalCollateralRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalCollateralRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalCollateralRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalCollateralRequest.Merge(m, src)
}
func (m *QueryTotalCollateralRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalCollateralRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalCollateralRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalCollateralRequest proto.InternalMessageInfo

type QueryTotalCollateralResponse struct {
	TotalCollateral TotalCollateral `protobuf:"bytes,1,opt,name=total_collateral,json=totalCollateral,proto3" json:"total_collateral"`
}

func (m *QueryTotalCollateralResponse) Reset()         { *m = QueryTotalCollateralResponse{} }
func (m *QueryTotalCollateralResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalCollateralResponse) ProtoMessage()    {}
func (*QueryTotalCollateralResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{17}
}
func (m *QueryTotalCollateralResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalCollateralResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalCollateralResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalCollateralResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalCollateralResponse.Merge(m, src)
}
func (m *QueryTotalCollateralResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalCollateralResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalCollateralResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalCollateralResponse proto.InternalMessageInfo

func (m *QueryTotalCollateralResponse) GetTotalCollateral() TotalCollateral {
	if m != nil {
		return m.TotalCollateral
	}
	return TotalCollateral{}
}

type QueryBackingRatioRequest struct {
}

func (m *QueryBackingRatioRequest) Reset()         { *m = QueryBackingRatioRequest{} }
func (m *QueryBackingRatioRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBackingRatioRequest) ProtoMessage()    {}
func (*QueryBackingRatioRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{18}
}
func (m *QueryBackingRatioRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBackingRatioRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBackingRatioRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBackingRatioRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBackingRatioRequest.Merge(m, src)
}
func (m *QueryBackingRatioRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBackingRatioRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBackingRatioRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBackingRatioRequest proto.InternalMessageInfo

type QueryBackingRatioResponse struct {
	BackingRatio    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=backing_ratio,json=backingRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"backing_ratio"`
	LastUpdateBlock int64                                  `protobuf:"varint,2,opt,name=last_update_block,json=lastUpdateBlock,proto3" json:"last_update_block,omitempty"`
}

func (m *QueryBackingRatioResponse) Reset()         { *m = QueryBackingRatioResponse{} }
func (m *QueryBackingRatioResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBackingRatioResponse) ProtoMessage()    {}
func (*QueryBackingRatioResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{19}
}
func (m *QueryBackingRatioResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBackingRatioResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBackingRatioResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBackingRatioResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBackingRatioResponse.Merge(m, src)
}
func (m *QueryBackingRatioResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBackingRatioResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBackingRatioResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBackingRatioResponse proto.InternalMessageInfo

func (m *QueryBackingRatioResponse) GetLastUpdateBlock() int64 {
	if m != nil {
		return m.LastUpdateBlock
	}
	return 0
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{20}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{21}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type EstimateMintBySwapInRequest struct {
	MintOut      types.Coin `protobuf:"bytes,1,opt,name=mint_out,json=mintOut,proto3" json:"mint_out"`
	BackingDenom string     `protobuf:"bytes,2,opt,name=backing_denom,json=backingDenom,proto3" json:"backing_denom,omitempty"`
	FullBacking  bool       `protobuf:"varint,3,opt,name=full_backing,json=fullBacking,proto3" json:"full_backing,omitempty"`
}

func (m *EstimateMintBySwapInRequest) Reset()         { *m = EstimateMintBySwapInRequest{} }
func (m *EstimateMintBySwapInRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateMintBySwapInRequest) ProtoMessage()    {}
func (*EstimateMintBySwapInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{22}
}
func (m *EstimateMintBySwapInRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateMintBySwapInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateMintBySwapInRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateMintBySwapInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateMintBySwapInRequest.Merge(m, src)
}
func (m *EstimateMintBySwapInRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateMintBySwapInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateMintBySwapInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateMintBySwapInRequest proto.InternalMessageInfo

func (m *EstimateMintBySwapInRequest) GetMintOut() types.Coin {
	if m != nil {
		return m.MintOut
	}
	return types.Coin{}
}

func (m *EstimateMintBySwapInRequest) GetBackingDenom() string {
	if m != nil {
		return m.BackingDenom
	}
	return ""
}

func (m *EstimateMintBySwapInRequest) GetFullBacking() bool {
	if m != nil {
		return m.FullBacking
	}
	return false
}

type EstimateMintBySwapInResponse struct {
	BackingIn types.Coin `protobuf:"bytes,1,opt,name=backing_in,json=backingIn,proto3" json:"backing_in"`
	LionIn    types.Coin `protobuf:"bytes,2,opt,name=lion_in,json=lionIn,proto3" json:"lion_in"`
	MintFee   types.Coin `protobuf:"bytes,3,opt,name=mint_fee,json=mintFee,proto3" json:"mint_fee"`
}

func (m *EstimateMintBySwapInResponse) Reset()         { *m = EstimateMintBySwapInResponse{} }
func (m *EstimateMintBySwapInResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateMintBySwapInResponse) ProtoMessage()    {}
func (*EstimateMintBySwapInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{23}
}
func (m *EstimateMintBySwapInResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateMintBySwapInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateMintBySwapInResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateMintBySwapInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateMintBySwapInResponse.Merge(m, src)
}
func (m *EstimateMintBySwapInResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateMintBySwapInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateMintBySwapInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateMintBySwapInResponse proto.InternalMessageInfo

func (m *EstimateMintBySwapInResponse) GetBackingIn() types.Coin {
	if m != nil {
		return m.BackingIn
	}
	return types.Coin{}
}

func (m *EstimateMintBySwapInResponse) GetLionIn() types.Coin {
	if m != nil {
		return m.LionIn
	}
	return types.Coin{}
}

func (m *EstimateMintBySwapInResponse) GetMintFee() types.Coin {
	if m != nil {
		return m.MintFee
	}
	return types.Coin{}
}

type EstimateMintBySwapOutRequest struct {
	BackingInMax types.Coin `protobuf:"bytes,1,opt,name=backing_in_max,json=backingInMax,proto3" json:"backing_in_max"`
	LionInMax    types.Coin `protobuf:"bytes,2,opt,name=lion_in_max,json=lionInMax,proto3" json:"lion_in_max"`
	FullBacking  bool       `protobuf:"varint,3,opt,name=full_backing,json=fullBacking,proto3" json:"full_backing,omitempty"`
}

func (m *EstimateMintBySwapOutRequest) Reset()         { *m = EstimateMintBySwapOutRequest{} }
func (m *EstimateMintBySwapOutRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateMintBySwapOutRequest) ProtoMessage()    {}
func (*EstimateMintBySwapOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{24}
}
func (m *EstimateMintBySwapOutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateMintBySwapOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateMintBySwapOutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateMintBySwapOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateMintBySwapOutRequest.Merge(m, src)
}
func (m *EstimateMintBySwapOutRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateMintBySwapOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateMintBySwapOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateMintBySwapOutRequest proto.InternalMessageInfo

func (m *EstimateMintBySwapOutRequest) GetBackingInMax() types.Coin {
	if m != nil {
		return m.BackingInMax
	}
	return types.Coin{}
}

func (m *EstimateMintBySwapOutRequest) GetLionInMax() types.Coin {
	if m != nil {
		return m.LionInMax
	}
	return types.Coin{}
}

func (m *EstimateMintBySwapOutRequest) GetFullBacking() bool {
	if m != nil {
		return m.FullBacking
	}
	return false
}

type EstimateMintBySwapOutResponse struct {
	BackingIn types.Coin `protobuf:"bytes,1,opt,name=backing_in,json=backingIn,proto3" json:"backing_in"`
	LionIn    types.Coin `protobuf:"bytes,2,opt,name=lion_in,json=lionIn,proto3" json:"lion_in"`
	MintOut   types.Coin `protobuf:"bytes,3,opt,name=mint_out,json=mintOut,proto3" json:"mint_out"`
	MintFee   types.Coin `protobuf:"bytes,4,opt,name=mint_fee,json=mintFee,proto3" json:"mint_fee"`
}

func (m *EstimateMintBySwapOutResponse) Reset()         { *m = EstimateMintBySwapOutResponse{} }
func (m *EstimateMintBySwapOutResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateMintBySwapOutResponse) ProtoMessage()    {}
func (*EstimateMintBySwapOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{25}
}
func (m *EstimateMintBySwapOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateMintBySwapOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateMintBySwapOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateMintBySwapOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateMintBySwapOutResponse.Merge(m, src)
}
func (m *EstimateMintBySwapOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateMintBySwapOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateMintBySwapOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateMintBySwapOutResponse proto.InternalMessageInfo

func (m *EstimateMintBySwapOutResponse) GetBackingIn() types.Coin {
	if m != nil {
		return m.BackingIn
	}
	return types.Coin{}
}

func (m *EstimateMintBySwapOutResponse) GetLionIn() types.Coin {
	if m != nil {
		return m.LionIn
	}
	return types.Coin{}
}

func (m *EstimateMintBySwapOutResponse) GetMintOut() types.Coin {
	if m != nil {
		return m.MintOut
	}
	return types.Coin{}
}

func (m *EstimateMintBySwapOutResponse) GetMintFee() types.Coin {
	if m != nil {
		return m.MintFee
	}
	return types.Coin{}
}

type EstimateBurnBySwapInRequest struct {
	BackingOutMax types.Coin `protobuf:"bytes,1,opt,name=backing_out_max,json=backingOutMax,proto3" json:"backing_out_max"`
	LionOutMax    types.Coin `protobuf:"bytes,2,opt,name=lion_out_max,json=lionOutMax,proto3" json:"lion_out_max"`
}

func (m *EstimateBurnBySwapInRequest) Reset()         { *m = EstimateBurnBySwapInRequest{} }
func (m *EstimateBurnBySwapInRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateBurnBySwapInRequest) ProtoMessage()    {}
func (*EstimateBurnBySwapInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{26}
}
func (m *EstimateBurnBySwapInRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateBurnBySwapInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateBurnBySwapInRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateBurnBySwapInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateBurnBySwapInRequest.Merge(m, src)
}
func (m *EstimateBurnBySwapInRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateBurnBySwapInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateBurnBySwapInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateBurnBySwapInRequest proto.InternalMessageInfo

func (m *EstimateBurnBySwapInRequest) GetBackingOutMax() types.Coin {
	if m != nil {
		return m.BackingOutMax
	}
	return types.Coin{}
}

func (m *EstimateBurnBySwapInRequest) GetLionOutMax() types.Coin {
	if m != nil {
		return m.LionOutMax
	}
	return types.Coin{}
}

type EstimateBurnBySwapInResponse struct {
	BurnIn     types.Coin `protobuf:"bytes,1,opt,name=burn_in,json=burnIn,proto3" json:"burn_in"`
	BackingOut types.Coin `protobuf:"bytes,2,opt,name=backing_out,json=backingOut,proto3" json:"backing_out"`
	LionOut    types.Coin `protobuf:"bytes,3,opt,name=lion_out,json=lionOut,proto3" json:"lion_out"`
	BurnFee    types.Coin `protobuf:"bytes,4,opt,name=burn_fee,json=burnFee,proto3" json:"burn_fee"`
}

func (m *EstimateBurnBySwapInResponse) Reset()         { *m = EstimateBurnBySwapInResponse{} }
func (m *EstimateBurnBySwapInResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateBurnBySwapInResponse) ProtoMessage()    {}
func (*EstimateBurnBySwapInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{27}
}
func (m *EstimateBurnBySwapInResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateBurnBySwapInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateBurnBySwapInResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateBurnBySwapInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateBurnBySwapInResponse.Merge(m, src)
}
func (m *EstimateBurnBySwapInResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateBurnBySwapInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateBurnBySwapInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateBurnBySwapInResponse proto.InternalMessageInfo

func (m *EstimateBurnBySwapInResponse) GetBurnIn() types.Coin {
	if m != nil {
		return m.BurnIn
	}
	return types.Coin{}
}

func (m *EstimateBurnBySwapInResponse) GetBackingOut() types.Coin {
	if m != nil {
		return m.BackingOut
	}
	return types.Coin{}
}

func (m *EstimateBurnBySwapInResponse) GetLionOut() types.Coin {
	if m != nil {
		return m.LionOut
	}
	return types.Coin{}
}

func (m *EstimateBurnBySwapInResponse) GetBurnFee() types.Coin {
	if m != nil {
		return m.BurnFee
	}
	return types.Coin{}
}

type EstimateBurnBySwapOutRequest struct {
	BurnIn       types.Coin `protobuf:"bytes,1,opt,name=burn_in,json=burnIn,proto3" json:"burn_in"`
	BackingDenom string     `protobuf:"bytes,2,opt,name=backing_denom,json=backingDenom,proto3" json:"backing_denom,omitempty"`
}

func (m *EstimateBurnBySwapOutRequest) Reset()         { *m = EstimateBurnBySwapOutRequest{} }
func (m *EstimateBurnBySwapOutRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateBurnBySwapOutRequest) ProtoMessage()    {}
func (*EstimateBurnBySwapOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{28}
}
func (m *EstimateBurnBySwapOutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateBurnBySwapOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateBurnBySwapOutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateBurnBySwapOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateBurnBySwapOutRequest.Merge(m, src)
}
func (m *EstimateBurnBySwapOutRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateBurnBySwapOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateBurnBySwapOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateBurnBySwapOutRequest proto.InternalMessageInfo

func (m *EstimateBurnBySwapOutRequest) GetBurnIn() types.Coin {
	if m != nil {
		return m.BurnIn
	}
	return types.Coin{}
}

func (m *EstimateBurnBySwapOutRequest) GetBackingDenom() string {
	if m != nil {
		return m.BackingDenom
	}
	return ""
}

type EstimateBurnBySwapOutResponse struct {
	BackingOut types.Coin `protobuf:"bytes,1,opt,name=backing_out,json=backingOut,proto3" json:"backing_out"`
	LionOut    types.Coin `protobuf:"bytes,2,opt,name=lion_out,json=lionOut,proto3" json:"lion_out"`
	BurnFee    types.Coin `protobuf:"bytes,3,opt,name=burn_fee,json=burnFee,proto3" json:"burn_fee"`
}

func (m *EstimateBurnBySwapOutResponse) Reset()         { *m = EstimateBurnBySwapOutResponse{} }
func (m *EstimateBurnBySwapOutResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateBurnBySwapOutResponse) ProtoMessage()    {}
func (*EstimateBurnBySwapOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{29}
}
func (m *EstimateBurnBySwapOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateBurnBySwapOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateBurnBySwapOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateBurnBySwapOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateBurnBySwapOutResponse.Merge(m, src)
}
func (m *EstimateBurnBySwapOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateBurnBySwapOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateBurnBySwapOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateBurnBySwapOutResponse proto.InternalMessageInfo

func (m *EstimateBurnBySwapOutResponse) GetBackingOut() types.Coin {
	if m != nil {
		return m.BackingOut
	}
	return types.Coin{}
}

func (m *EstimateBurnBySwapOutResponse) GetLionOut() types.Coin {
	if m != nil {
		return m.LionOut
	}
	return types.Coin{}
}

func (m *EstimateBurnBySwapOutResponse) GetBurnFee() types.Coin {
	if m != nil {
		return m.BurnFee
	}
	return types.Coin{}
}

type EstimateBuyBackingOutRequest struct {
	LionIn       types.Coin `protobuf:"bytes,1,opt,name=lion_in,json=lionIn,proto3" json:"lion_in"`
	BackingDenom string     `protobuf:"bytes,2,opt,name=backing_denom,json=backingDenom,proto3" json:"backing_denom,omitempty"`
}

func (m *EstimateBuyBackingOutRequest) Reset()         { *m = EstimateBuyBackingOutRequest{} }
func (m *EstimateBuyBackingOutRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateBuyBackingOutRequest) ProtoMessage()    {}
func (*EstimateBuyBackingOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{30}
}
func (m *EstimateBuyBackingOutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateBuyBackingOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateBuyBackingOutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateBuyBackingOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateBuyBackingOutRequest.Merge(m, src)
}
func (m *EstimateBuyBackingOutRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateBuyBackingOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateBuyBackingOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateBuyBackingOutRequest proto.InternalMessageInfo

func (m *EstimateBuyBackingOutRequest) GetLionIn() types.Coin {
	if m != nil {
		return m.LionIn
	}
	return types.Coin{}
}

func (m *EstimateBuyBackingOutRequest) GetBackingDenom() string {
	if m != nil {
		return m.BackingDenom
	}
	return ""
}

type EstimateBuyBackingOutResponse struct {
	BackingOut types.Coin `protobuf:"bytes,1,opt,name=backing_out,json=backingOut,proto3" json:"backing_out"`
	BuybackFee types.Coin `protobuf:"bytes,2,opt,name=buyback_fee,json=buybackFee,proto3" json:"buyback_fee"`
}

func (m *EstimateBuyBackingOutResponse) Reset()         { *m = EstimateBuyBackingOutResponse{} }
func (m *EstimateBuyBackingOutResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateBuyBackingOutResponse) ProtoMessage()    {}
func (*EstimateBuyBackingOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{31}
}
func (m *EstimateBuyBackingOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateBuyBackingOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateBuyBackingOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateBuyBackingOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateBuyBackingOutResponse.Merge(m, src)
}
func (m *EstimateBuyBackingOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateBuyBackingOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateBuyBackingOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateBuyBackingOutResponse proto.InternalMessageInfo

func (m *EstimateBuyBackingOutResponse) GetBackingOut() types.Coin {
	if m != nil {
		return m.BackingOut
	}
	return types.Coin{}
}

func (m *EstimateBuyBackingOutResponse) GetBuybackFee() types.Coin {
	if m != nil {
		return m.BuybackFee
	}
	return types.Coin{}
}

type EstimateSellBackingOutRequest struct {
	BackingIn types.Coin `protobuf:"bytes,1,opt,name=backing_in,json=backingIn,proto3" json:"backing_in"`
}

func (m *EstimateSellBackingOutRequest) Reset()         { *m = EstimateSellBackingOutRequest{} }
func (m *EstimateSellBackingOutRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateSellBackingOutRequest) ProtoMessage()    {}
func (*EstimateSellBackingOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{32}
}
func (m *EstimateSellBackingOutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateSellBackingOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateSellBackingOutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateSellBackingOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateSellBackingOutRequest.Merge(m, src)
}
func (m *EstimateSellBackingOutRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateSellBackingOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateSellBackingOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateSellBackingOutRequest proto.InternalMessageInfo

func (m *EstimateSellBackingOutRequest) GetBackingIn() types.Coin {
	if m != nil {
		return m.BackingIn
	}
	return types.Coin{}
}

type EstimateSellBackingOutResponse struct {
	LionOut     types.Coin `protobuf:"bytes,1,opt,name=lion_out,json=lionOut,proto3" json:"lion_out"`
	SellbackFee types.Coin `protobuf:"bytes,2,opt,name=sellback_fee,json=sellbackFee,proto3" json:"sellback_fee"`
}

func (m *EstimateSellBackingOutResponse) Reset()         { *m = EstimateSellBackingOutResponse{} }
func (m *EstimateSellBackingOutResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateSellBackingOutResponse) ProtoMessage()    {}
func (*EstimateSellBackingOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{33}
}
func (m *EstimateSellBackingOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateSellBackingOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateSellBackingOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateSellBackingOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateSellBackingOutResponse.Merge(m, src)
}
func (m *EstimateSellBackingOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateSellBackingOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateSellBackingOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateSellBackingOutResponse proto.InternalMessageInfo

func (m *EstimateSellBackingOutResponse) GetLionOut() types.Coin {
	if m != nil {
		return m.LionOut
	}
	return types.Coin{}
}

func (m *EstimateSellBackingOutResponse) GetSellbackFee() types.Coin {
	if m != nil {
		return m.SellbackFee
	}
	return types.Coin{}
}

type EstimateMintByCollateralInRequest struct {
	Sender          string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MintOut         types.Coin `protobuf:"bytes,2,opt,name=mint_out,json=mintOut,proto3" json:"mint_out"`
	CollateralDenom string     `protobuf:"bytes,3,opt,name=collateral_denom,json=collateralDenom,proto3" json:"collateral_denom,omitempty"`
	LionInMax       types.Coin `protobuf:"bytes,4,opt,name=lion_in_max,json=lionInMax,proto3" json:"lion_in_max"`
}

func (m *EstimateMintByCollateralInRequest) Reset()         { *m = EstimateMintByCollateralInRequest{} }
func (m *EstimateMintByCollateralInRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateMintByCollateralInRequest) ProtoMessage()    {}
func (*EstimateMintByCollateralInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{34}
}
func (m *EstimateMintByCollateralInRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateMintByCollateralInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateMintByCollateralInRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateMintByCollateralInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateMintByCollateralInRequest.Merge(m, src)
}
func (m *EstimateMintByCollateralInRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateMintByCollateralInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateMintByCollateralInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateMintByCollateralInRequest proto.InternalMessageInfo

func (m *EstimateMintByCollateralInRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EstimateMintByCollateralInRequest) GetMintOut() types.Coin {
	if m != nil {
		return m.MintOut
	}
	return types.Coin{}
}

func (m *EstimateMintByCollateralInRequest) GetCollateralDenom() string {
	if m != nil {
		return m.CollateralDenom
	}
	return ""
}

func (m *EstimateMintByCollateralInRequest) GetLionInMax() types.Coin {
	if m != nil {
		return m.LionInMax
	}
	return types.Coin{}
}

type EstimateMintByCollateralInResponse struct {
	LionIn    types.Coin        `protobuf:"bytes,1,opt,name=lion_in,json=lionIn,proto3" json:"lion_in"`
	MintFee   types.Coin        `protobuf:"bytes,2,opt,name=mint_fee,json=mintFee,proto3" json:"mint_fee"`
	TotalColl TotalCollateral   `protobuf:"bytes,3,opt,name=total_coll,json=totalColl,proto3" json:"total_coll"`
	PoolColl  PoolCollateral    `protobuf:"bytes,4,opt,name=pool_coll,json=poolColl,proto3" json:"pool_coll"`
	AccColl   AccountCollateral `protobuf:"bytes,5,opt,name=acc_coll,json=accColl,proto3" json:"acc_coll"`
}

func (m *EstimateMintByCollateralInResponse) Reset()         { *m = EstimateMintByCollateralInResponse{} }
func (m *EstimateMintByCollateralInResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateMintByCollateralInResponse) ProtoMessage()    {}
func (*EstimateMintByCollateralInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6c4552b535aace, []int{35}
}
func (m *EstimateMintByCollateralInResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateMintByCollateralInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateMintByCollateralInResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateMintByCollateralInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateMintByCollateralInResponse.Merge(m, src)
}
func (m *EstimateMintByCollateralInResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateMintByCollateralInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateMintByCollateralInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateMintByCollateralInResponse proto.InternalMessageInfo

func (m *EstimateMintByCollateralInResponse) GetLionIn() types.Coin {
	if m != nil {
		return m.LionIn
	}
	return types.Coin{}
}

func (m *EstimateMintByCollateralInResponse) GetMintFee() types.Coin {
	if m != nil {
		return m.MintFee
	}
	return types.Coin{}
}

func (m *EstimateMintByCollateralInResponse) GetTotalColl() TotalCollateral {
	if m != nil {
		return m.TotalColl
	}
	return TotalCollateral{}
}

func (m *EstimateMintByCollateralInResponse) GetPoolColl() PoolCollateral {
	if m != nil {
		return m.PoolColl
	}
	return PoolCollateral{}
}

func (m *EstimateMintByCollateralInResponse) GetAccColl() AccountCollateral {
	if m != nil {
		return m.AccColl
	}
	return AccountCollateral{}
}

func init() {
	proto.RegisterType((*QueryAllBackingRiskParamsRequest)(nil), "merlion.maker.v1.QueryAllBackingRiskParamsRequest")
	proto.RegisterType((*QueryAllBackingRiskParamsResponse)(nil), "merlion.maker.v1.QueryAllBackingRiskParamsResponse")
	proto.RegisterType((*QueryAllCollateralRiskParamsRequest)(nil), "merlion.maker.v1.QueryAllCollateralRiskParamsRequest")
	proto.RegisterType((*QueryAllCollateralRiskParamsResponse)(nil), "merlion.maker.v1.QueryAllCollateralRiskParamsResponse")
	proto.RegisterType((*QueryAllBackingPoolsRequest)(nil), "merlion.maker.v1.QueryAllBackingPoolsRequest")
	proto.RegisterType((*QueryAllBackingPoolsResponse)(nil), "merlion.maker.v1.QueryAllBackingPoolsResponse")
	proto.RegisterType((*QueryAllCollateralPoolsRequest)(nil), "merlion.maker.v1.QueryAllCollateralPoolsRequest")
	proto.RegisterType((*QueryAllCollateralPoolsResponse)(nil), "merlion.maker.v1.QueryAllCollateralPoolsResponse")
	proto.RegisterType((*QueryBackingPoolRequest)(nil), "merlion.maker.v1.QueryBackingPoolRequest")
	proto.RegisterType((*QueryBackingPoolResponse)(nil), "merlion.maker.v1.QueryBackingPoolResponse")
	proto.RegisterType((*QueryCollateralPoolRequest)(nil), "merlion.maker.v1.QueryCollateralPoolRequest")
	proto.RegisterType((*QueryCollateralPoolResponse)(nil), "merlion.maker.v1.QueryCollateralPoolResponse")
	proto.RegisterType((*QueryCollateralOfAccountRequest)(nil), "merlion.maker.v1.QueryCollateralOfAccountRequest")
	proto.RegisterType((*QueryCollateralOfAccountResponse)(nil), "merlion.maker.v1.QueryCollateralOfAccountResponse")
	proto.RegisterType((*QueryTotalBackingRequest)(nil), "merlion.maker.v1.QueryTotalBackingRequest")
	proto.RegisterType((*QueryTotalBackingResponse)(nil), "merlion.maker.v1.QueryTotalBackingResponse")
	proto.RegisterType((*QueryTotalCollateralRequest)(nil), "merlion.maker.v1.QueryTotalCollateralRequest")
	proto.RegisterType((*QueryTotalCollateralResponse)(nil), "merlion.maker.v1.QueryTotalCollateralResponse")
	proto.RegisterType((*QueryBackingRatioRequest)(nil), "merlion.maker.v1.QueryBackingRatioRequest")
	proto.RegisterType((*QueryBackingRatioResponse)(nil), "merlion.maker.v1.QueryBackingRatioResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "merlion.maker.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "merlion.maker.v1.QueryParamsResponse")
	proto.RegisterType((*EstimateMintBySwapInRequest)(nil), "merlion.maker.v1.EstimateMintBySwapInRequest")
	proto.RegisterType((*EstimateMintBySwapInResponse)(nil), "merlion.maker.v1.EstimateMintBySwapInResponse")
	proto.RegisterType((*EstimateMintBySwapOutRequest)(nil), "merlion.maker.v1.EstimateMintBySwapOutRequest")
	proto.RegisterType((*EstimateMintBySwapOutResponse)(nil), "merlion.maker.v1.EstimateMintBySwapOutResponse")
	proto.RegisterType((*EstimateBurnBySwapInRequest)(nil), "merlion.maker.v1.EstimateBurnBySwapInRequest")
	proto.RegisterType((*EstimateBurnBySwapInResponse)(nil), "merlion.maker.v1.EstimateBurnBySwapInResponse")
	proto.RegisterType((*EstimateBurnBySwapOutRequest)(nil), "merlion.maker.v1.EstimateBurnBySwapOutRequest")
	proto.RegisterType((*EstimateBurnBySwapOutResponse)(nil), "merlion.maker.v1.EstimateBurnBySwapOutResponse")
	proto.RegisterType((*EstimateBuyBackingOutRequest)(nil), "merlion.maker.v1.EstimateBuyBackingOutRequest")
	proto.RegisterType((*EstimateBuyBackingOutResponse)(nil), "merlion.maker.v1.EstimateBuyBackingOutResponse")
	proto.RegisterType((*EstimateSellBackingOutRequest)(nil), "merlion.maker.v1.EstimateSellBackingOutRequest")
	proto.RegisterType((*EstimateSellBackingOutResponse)(nil), "merlion.maker.v1.EstimateSellBackingOutResponse")
	proto.RegisterType((*EstimateMintByCollateralInRequest)(nil), "merlion.maker.v1.EstimateMintByCollateralInRequest")
	proto.RegisterType((*EstimateMintByCollateralInResponse)(nil), "merlion.maker.v1.EstimateMintByCollateralInResponse")
}

func init() { proto.RegisterFile("merlion/maker/v1/query.proto", fileDescriptor_0c6c4552b535aace) }

var fileDescriptor_0c6c4552b535aace = []byte{
	// 1762 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x99, 0xcf, 0x6f, 0xdc, 0x44,
	0x1b, 0xc7, 0xe3, 0x4d, 0x9a, 0x1f, 0xcf, 0xa6, 0x4d, 0x3b, 0xcd, 0xdb, 0xa6, 0x6e, 0xba, 0xd9,
	0x38, 0x69, 0xde, 0xfc, 0xdc, 0x6d, 0x92, 0xbe, 0x55, 0xf5, 0x1e, 0xfa, 0xbe, 0xdd, 0xfe, 0x22,
	0x48, 0x51, 0xda, 0x14, 0x24, 0xc4, 0x65, 0xe5, 0xdd, 0x38, 0xa9, 0x95, 0x5d, 0x7b, 0xbb, 0xb6,
	0xdb, 0x06, 0xc1, 0x85, 0x33, 0x87, 0x02, 0x17, 0x0e, 0x45, 0x02, 0x71, 0x2a, 0x02, 0x09, 0x71,
	0x46, 0x48, 0xdc, 0xca, 0xad, 0x12, 0x1c, 0x80, 0x43, 0x85, 0x1a, 0xae, 0xfc, 0x0f, 0x68, 0xc6,
	0x8f, 0xd7, 0xe3, 0xf5, 0xd8, 0x19, 0x37, 0x1c, 0x38, 0xb5, 0x3b, 0x33, 0xcf, 0x3c, 0x9f, 0xe7,
	0x3b, 0xf3, 0x8c, 0x67, 0x9e, 0xc0, 0x78, 0xd3, 0x68, 0x37, 0x4c, 0xdb, 0x2a, 0x37, 0xf5, 0x5d,
	0xa3, 0x5d, 0x7e, 0xb0, 0x5c, 0xbe, 0xef, 0x19, 0xed, 0xbd, 0x52, 0xab, 0x6d, 0xbb, 0x36, 0x39,
	0x8e, 0xbd, 0x25, 0xd6, 0x5b, 0x7a, 0xb0, 0xac, 0x8e, 0xee, 0xd8, 0x3b, 0x36, 0xeb, 0x2c, 0xd3,
	0xff, 0xf9, 0xe3, 0xd4, 0xf1, 0x1d, 0xdb, 0xde, 0x69, 0x18, 0x65, 0xbd, 0x65, 0x96, 0x75, 0xcb,
	0xb2, 0x5d, 0xdd, 0x35, 0x6d, 0xcb, 0xc1, 0xde, 0x42, 0xcc, 0xc7, 0x8e, 0x61, 0x19, 0x8e, 0x19,
	0xf4, 0xc7, 0x19, 0x7c, 0x77, 0x68, 0x5d, 0xb7, 0x9d, 0xa6, 0xed, 0x94, 0x6b, 0xba, 0x63, 0x94,
	0x1f, 0x2c, 0xd7, 0x0c, 0x57, 0x5f, 0x2e, 0xd7, 0x6d, 0xd3, 0xf2, 0xfb, 0x35, 0x0d, 0x8a, 0x77,
	0x28, 0xf2, 0xd5, 0x46, 0xa3, 0xa2, 0xd7, 0x77, 0x4d, 0x6b, 0x67, 0xd3, 0x74, 0x76, 0x6f, 0xeb,
	0x6d, 0xbd, 0xe9, 0x6c, 0x1a, 0xf7, 0x3d, 0xc3, 0x71, 0x35, 0x1b, 0x26, 0x53, 0xc6, 0x38, 0x2d,
	0xdb, 0x72, 0x0c, 0xf2, 0x3a, 0xe4, 0xdb, 0xa6, 0xb3, 0x5b, 0x6d, 0xb1, 0xe6, 0x31, 0xa5, 0xd8,
	0x3b, 0x9b, 0x5f, 0x99, 0x2a, 0x75, 0x4b, 0x50, 0x8a, 0xcd, 0x50, 0xe9, 0x7b, 0xf6, 0x62, 0xa2,
	0x67, 0x13, 0xda, 0x9d, 0x16, 0xed, 0x3c, 0x4c, 0x05, 0x0e, 0xaf, 0xd9, 0x8d, 0x86, 0xee, 0x1a,
	0x6d, 0xbd, 0x11, 0xe7, 0xf2, 0x60, 0x3a, 0x7d, 0x18, 0xa2, 0xad, 0x8b, 0xd0, 0x66, 0xe2, 0x68,
	0xa2, 0x49, 0x04, 0x74, 0xe7, 0xe0, 0x6c, 0x97, 0x1c, 0xb7, 0x6d, 0xbb, 0xd1, 0xa1, 0xba, 0x07,
	0xe3, 0xe2, 0x6e, 0xa4, 0x79, 0x0d, 0x8e, 0xd6, 0xfc, 0xf6, 0x6a, 0x8b, 0x76, 0x20, 0xcf, 0xb9,
	0x38, 0x0f, 0xb5, 0xc3, 0x29, 0x10, 0x63, 0xb8, 0xc6, 0xcd, 0xa8, 0x15, 0xa1, 0x10, 0x8f, 0x3f,
	0xc2, 0xe2, 0xc2, 0x44, 0xe2, 0x08, 0xc4, 0xb9, 0x03, 0xc7, 0xeb, 0x9d, 0xae, 0x08, 0x51, 0x51,
	0x4c, 0x14, 0x4e, 0x84, 0x50, 0x23, 0xf5, 0xe8, 0xd4, 0xda, 0x15, 0x38, 0xcd, 0xbc, 0x72, 0xe1,
	0x23, 0x10, 0x99, 0x0a, 0x83, 0xdf, 0x32, 0x2c, 0xbb, 0x39, 0xa6, 0x14, 0x95, 0xd9, 0xa1, 0x4e,
	0x5c, 0xd7, 0x69, 0x9b, 0x56, 0x83, 0xb1, 0xb8, 0x3d, 0xe2, 0xde, 0x84, 0x61, 0x5e, 0x3d, 0x66,
	0x2f, 0x29, 0x5e, 0x9e, 0x13, 0x4f, 0xbb, 0x05, 0x2a, 0xf3, 0x11, 0x95, 0x25, 0xc0, 0x9c, 0x8b,
	0x88, 0xc2, 0x93, 0x72, 0xc1, 0xfa, 0xb0, 0x16, 0xee, 0x86, 0xee, 0x89, 0x90, 0x77, 0x03, 0x46,
	0xba, 0xe4, 0x45, 0x64, 0x59, 0x75, 0x8f, 0x45, 0xd5, 0xd5, 0xb6, 0x71, 0x49, 0xc3, 0x81, 0x1b,
	0xdb, 0x57, 0xeb, 0x75, 0xdb, 0xb3, 0xdc, 0x80, 0x7e, 0x0c, 0x06, 0x74, 0xbf, 0x05, 0xa1, 0x83,
	0x9f, 0xc2, 0xb8, 0x72, 0xe2, 0xb8, 0xde, 0xc5, 0x83, 0x41, 0xe8, 0x07, 0x83, 0x7b, 0x0b, 0x08,
	0xce, 0x5c, 0x0d, 0xcd, 0x31, 0x3e, 0x41, 0xea, 0xa3, 0x79, 0x2c, 0xc4, 0x13, 0x7a, 0x77, 0x87,
	0xa6, 0xe2, 0x16, 0x78, 0xc3, 0x76, 0xf5, 0xce, 0xa1, 0x83, 0x9b, 0x7a, 0x1b, 0xce, 0x08, 0xfa,
	0x10, 0x69, 0x0d, 0x8e, 0xba, 0xb4, 0xbd, 0x8a, 0x8b, 0x8d, 0x34, 0x85, 0x38, 0x0d, 0x6f, 0x1e,
	0xa4, 0x97, 0xcb, 0xb5, 0x75, 0xf2, 0x9c, 0x0d, 0xe4, 0xce, 0x06, 0xc4, 0x68, 0x63, 0x9e, 0xc7,
	0xba, 0x91, 0x64, 0x13, 0x8e, 0xfb, 0x24, 0x31, 0x69, 0x26, 0x13, 0x60, 0xe2, 0x99, 0xe5, 0x46,
	0x9b, 0x3b, 0xb2, 0x04, 0x51, 0xd3, 0x0f, 0x45, 0xc0, 0xf3, 0x44, 0x41, 0x5d, 0xa2, 0x9d, 0x48,
	0x73, 0x37, 0x4c, 0xbc, 0x36, 0xed, 0xf0, 0x77, 0x46, 0xa5, 0x44, 0xfd, 0xfc, 0xf6, 0x62, 0x62,
	0x66, 0xc7, 0x74, 0xef, 0x79, 0xb5, 0x52, 0xdd, 0x6e, 0x96, 0xf1, 0x8b, 0xe1, 0xff, 0xb3, 0xe4,
	0x6c, 0xed, 0x96, 0xdd, 0xbd, 0x96, 0xe1, 0x94, 0xae, 0x1b, 0xf5, 0x4e, 0xa2, 0xb2, 0xc9, 0xc9,
	0x3c, 0x9c, 0x68, 0xe8, 0x8e, 0x5b, 0xf5, 0x5a, 0x5b, 0xba, 0x6b, 0x54, 0x6b, 0x0d, 0xbb, 0xbe,
	0xcb, 0xf6, 0x53, 0xef, 0xe6, 0x08, 0xed, 0x78, 0x93, 0xb5, 0x57, 0x68, 0xb3, 0x36, 0x0a, 0x84,
	0xd1, 0x45, 0x8f, 0xf0, 0x75, 0x38, 0x19, 0x69, 0x45, 0xda, 0x4b, 0xd0, 0xdf, 0x39, 0xac, 0xa9,
	0x62, 0x63, 0x82, 0x64, 0xe1, 0x8f, 0x67, 0x1c, 0xad, 0x7d, 0xae, 0xc0, 0xd9, 0x1b, 0x8e, 0x6b,
	0x36, 0x75, 0xd7, 0x58, 0x37, 0x2d, 0xb7, 0xb2, 0x77, 0xf7, 0xa1, 0xde, 0x5a, 0xb3, 0x82, 0xcc,
	0xf8, 0x2f, 0x0c, 0x36, 0x4d, 0xcb, 0xad, 0xda, 0x9e, 0x8b, 0x33, 0x9f, 0x29, 0xf9, 0x71, 0x96,
	0xe8, 0x07, 0xb2, 0x84, 0x1f, 0xc8, 0xd2, 0x35, 0xdb, 0xb4, 0x70, 0xea, 0x01, 0x6a, 0xb0, 0xe1,
	0x09, 0x8e, 0xae, 0x5c, 0xfc, 0xe8, 0x22, 0x93, 0x30, 0xbc, 0xed, 0x35, 0xc2, 0xdd, 0xd7, 0x5b,
	0x54, 0x66, 0x07, 0x37, 0xf3, 0xb4, 0x2d, 0xd8, 0x56, 0x3f, 0x2b, 0x30, 0x2e, 0x66, 0xc4, 0xe0,
	0xaf, 0x00, 0x04, 0x8e, 0x4c, 0x4b, 0x16, 0x73, 0x08, 0x4d, 0xd6, 0x2c, 0x72, 0x19, 0x06, 0xa8,
	0x54, 0xd4, 0x38, 0x27, 0x67, 0xdc, 0x4f, 0xc7, 0xaf, 0x59, 0x1d, 0x79, 0xb6, 0x0d, 0x83, 0x91,
	0xcb, 0xca, 0x73, 0xd3, 0x30, 0xb4, 0x1f, 0x85, 0x61, 0x6d, 0x78, 0x9d, 0x53, 0xe9, 0x06, 0x1c,
	0x0b, 0xc3, 0xaa, 0x36, 0xf5, 0x47, 0xb2, 0xa1, 0x0d, 0x77, 0x42, 0x5b, 0xd7, 0x1f, 0x91, 0xff,
	0x41, 0x1e, 0xa3, 0x63, 0x73, 0x48, 0x46, 0x38, 0xe4, 0x47, 0x48, 0x27, 0x90, 0x58, 0xa2, 0x0f,
	0x73, 0x70, 0x2e, 0x21, 0x96, 0x7f, 0xcc, 0x1a, 0xd1, 0x2d, 0xdc, 0x9b, 0x71, 0x0b, 0xf3, 0xeb,
	0xdb, 0x97, 0x71, 0x7d, 0x9f, 0x72, 0xa9, 0x55, 0xf1, 0xda, 0x56, 0x77, 0x6a, 0xdd, 0x82, 0x91,
	0x40, 0x11, 0xdb, 0x73, 0xb3, 0xac, 0x6f, 0x90, 0x56, 0x1b, 0x9e, 0x4b, 0xd7, 0xe7, 0x2a, 0x0c,
	0x33, 0x69, 0x82, 0x59, 0x24, 0xf5, 0x01, 0x6a, 0xe4, 0x4f, 0xa1, 0x7d, 0x94, 0x0b, 0xf7, 0x62,
	0x94, 0x15, 0x97, 0xef, 0x32, 0x0c, 0xd4, 0xbc, 0xb6, 0x95, 0x61, 0xed, 0xfa, 0xe9, 0xf8, 0x35,
	0x8b, 0xfc, 0x1f, 0xf2, 0x5c, 0x98, 0xd2, 0x70, 0x61, 0x88, 0x74, 0x11, 0x82, 0xf8, 0xa4, 0x17,
	0x10, 0x63, 0xa3, 0xb6, 0x8c, 0x3b, 0xcb, 0x02, 0x52, 0x03, 0xba, 0x80, 0xef, 0x89, 0x34, 0xe1,
	0xf2, 0xf3, 0xd5, 0x35, 0x91, 0x39, 0x19, 0xb5, 0x5f, 0x95, 0x30, 0xa7, 0xba, 0xfc, 0xe3, 0xa2,
	0x74, 0x49, 0xab, 0x1c, 0x4e, 0xda, 0xdc, 0x21, 0xa4, 0xed, 0x3d, 0x8c, 0xb4, 0xc1, 0xf7, 0x37,
	0x2a, 0x6d, 0x90, 0xed, 0x4a, 0xb6, 0x6c, 0x97, 0x92, 0xf6, 0x8b, 0x88, 0xb4, 0x11, 0xff, 0x7f,
	0x9b, 0xb4, 0x74, 0x06, 0x6f, 0x8f, 0x36, 0x30, 0x85, 0xa4, 0xf7, 0xbd, 0x6f, 0x43, 0x45, 0xaa,
	0x86, 0x90, 0x77, 0x8d, 0xce, 0x59, 0xcb, 0xa9, 0x74, 0xc8, 0x33, 0x55, 0xfb, 0x4c, 0x81, 0x42,
	0x92, 0x07, 0xd4, 0x81, 0xdf, 0x20, 0x4a, 0xc6, 0x0d, 0x52, 0x81, 0x61, 0xc7, 0x68, 0x34, 0xb2,
	0x4a, 0x90, 0x0f, 0x8c, 0xa8, 0x06, 0xfb, 0x0a, 0x4c, 0x46, 0x3f, 0x2c, 0xe1, 0xe5, 0x2e, 0x3c,
	0x4a, 0x4f, 0x41, 0xbf, 0x63, 0x58, 0x5b, 0x46, 0x1b, 0xaf, 0xef, 0xf8, 0x2b, 0x72, 0xf4, 0xe7,
	0x32, 0x1e, 0xfd, 0xa2, 0x9b, 0x7f, 0xaf, 0xf0, 0xe6, 0xdf, 0xfd, 0x85, 0xed, 0xcb, 0xfa, 0x85,
	0xd5, 0xfe, 0xcc, 0x81, 0x96, 0x16, 0x65, 0x78, 0x08, 0xbf, 0x62, 0x56, 0xf0, 0xdf, 0xb1, 0x5c,
	0xb6, 0xef, 0x18, 0xb9, 0x09, 0x10, 0x5e, 0xcb, 0x31, 0xd3, 0xa5, 0x2f, 0xe4, 0x43, 0x9d, 0x0b,
	0x39, 0xb9, 0x06, 0x43, 0xf4, 0x35, 0xe7, 0x4f, 0xd3, 0x97, 0xe9, 0x49, 0x37, 0xd8, 0xc2, 0x56,
	0x72, 0x1d, 0x06, 0xf5, 0x7a, 0xdd, 0x9f, 0xe3, 0x48, 0xd6, 0x67, 0x13, 0x7d, 0xd5, 0xd1, 0xc6,
	0x95, 0xef, 0x4e, 0xc3, 0x11, 0x76, 0x8b, 0x26, 0xdf, 0x2a, 0x30, 0x2a, 0xaa, 0xd2, 0x90, 0x95,
	0xf8, 0xb4, 0x07, 0x95, 0x7d, 0xd4, 0xd5, 0x4c, 0x36, 0xfe, 0xa2, 0x6a, 0xcb, 0xef, 0xff, 0xf4,
	0xc7, 0xc7, 0xb9, 0x05, 0x32, 0x57, 0x8e, 0x95, 0xa5, 0xf4, 0xf0, 0xd2, 0x55, 0xe5, 0xea, 0x31,
	0xe4, 0x7b, 0x05, 0x4e, 0x27, 0x94, 0x70, 0xc8, 0x7f, 0x92, 0x19, 0x52, 0x2a, 0x43, 0xea, 0xa5,
	0xac, 0x66, 0x48, 0x7f, 0x91, 0xd1, 0x97, 0xc8, 0xa2, 0x98, 0x9e, 0xcb, 0x20, 0x3e, 0x80, 0x4f,
	0x15, 0x18, 0xe9, 0xaa, 0xf6, 0x90, 0xa5, 0x03, 0xc5, 0xe3, 0x0b, 0x35, 0x6a, 0x49, 0x76, 0x38,
	0x82, 0x2e, 0x30, 0xd0, 0xf3, 0x64, 0x2a, 0x5d, 0x66, 0x56, 0xce, 0x21, 0x4f, 0x15, 0x20, 0xf1,
	0x0a, 0x10, 0xb9, 0x20, 0x23, 0x52, 0x84, 0x72, 0x39, 0x83, 0x05, 0x82, 0x96, 0x18, 0xe8, 0x2c,
	0x99, 0x39, 0x50, 0x51, 0x9f, 0xf5, 0x03, 0x05, 0xf2, 0x5c, 0xc4, 0x64, 0x2e, 0xc1, 0x65, 0xbc,
	0xb6, 0xa4, 0xce, 0xcb, 0x0c, 0x45, 0xac, 0x19, 0x86, 0x55, 0x24, 0x85, 0x38, 0x16, 0xaf, 0x1d,
	0xf9, 0x44, 0x81, 0x63, 0xd1, 0xd0, 0xc8, 0x62, 0x82, 0x1b, 0x61, 0x25, 0x49, 0x5d, 0x92, 0x1c,
	0x8d, 0x5c, 0x73, 0x8c, 0x6b, 0x8a, 0x4c, 0xc6, 0xb9, 0xba, 0xa4, 0x22, 0x5f, 0x2a, 0x70, 0x52,
	0x50, 0x9c, 0x21, 0xcb, 0x07, 0x7a, 0xec, 0x2e, 0x18, 0xa9, 0x2b, 0x59, 0x4c, 0x90, 0x74, 0x91,
	0x91, 0xce, 0x90, 0xe9, 0x54, 0xd2, 0xa0, 0xf0, 0xf4, 0x58, 0x81, 0x61, 0xbe, 0xe0, 0x42, 0x92,
	0x16, 0x4b, 0x50, 0xf0, 0x51, 0x17, 0xa4, 0xc6, 0x22, 0xd7, 0xbf, 0x19, 0xd7, 0x24, 0x99, 0x88,
	0x73, 0x45, 0x0a, 0x43, 0xe4, 0x89, 0x02, 0x23, 0x5d, 0xa7, 0x7c, 0x62, 0xd6, 0x8a, 0x4b, 0x40,
	0x89, 0x59, 0x9b, 0x50, 0x12, 0xd2, 0xe6, 0x19, 0xdb, 0x34, 0xd1, 0x92, 0xd8, 0x42, 0xe5, 0x98,
	0x62, 0x95, 0x48, 0xb1, 0x25, 0x7d, 0x7b, 0xf3, 0xb5, 0xa0, 0x44, 0xc5, 0x44, 0xa5, 0xa1, 0x34,
	0xc5, 0x22, 0x25, 0x23, 0xf2, 0x10, 0xfa, 0xf1, 0x58, 0x9e, 0x4e, 0x98, 0x3f, 0x7a, 0x0a, 0x9f,
	0x3f, 0x60, 0x14, 0xfa, 0x2f, 0x32, 0xff, 0x2a, 0x19, 0x8b, 0xfb, 0xc7, 0x03, 0xf6, 0xa9, 0x02,
	0xa3, 0xa2, 0x92, 0x89, 0x68, 0xbd, 0x52, 0xca, 0x3f, 0xa2, 0xf5, 0x4a, 0xab, 0xc4, 0x68, 0x2b,
	0x8c, 0x6c, 0x91, 0xcc, 0xc7, 0xc9, 0x0c, 0xb4, 0xab, 0xb2, 0x8b, 0x48, 0x6d, 0xaf, 0xea, 0x3c,
	0xd4, 0x5b, 0x55, 0xd3, 0x22, 0x5f, 0x2b, 0xf0, 0x2f, 0x61, 0xed, 0x80, 0x48, 0x79, 0x0f, 0xef,
	0xc3, 0x6a, 0x59, 0x7a, 0x3c, 0xe2, 0xae, 0x32, 0xdc, 0x25, 0xb2, 0x20, 0x8b, 0x6b, 0x7b, 0x6e,
	0x44, 0x5b, 0xfe, 0xad, 0x9c, 0xa6, 0xad, 0xe0, 0xfd, 0x9f, 0xa6, 0xad, 0xe8, 0x09, 0x2e, 0xa5,
	0x2d, 0x7b, 0x90, 0x25, 0x68, 0x1b, 0x79, 0x43, 0x12, 0x29, 0xef, 0x72, 0xda, 0x0a, 0x1f, 0xa7,
	0x52, 0xda, 0x46, 0x70, 0xa9, 0xb6, 0x5f, 0x45, 0x78, 0xb9, 0x87, 0x59, 0x3a, 0x6f, 0xfc, 0x05,
	0x99, 0xce, 0x2b, 0x78, 0xf1, 0x49, 0xca, 0xbb, 0x57, 0xe5, 0x9e, 0x85, 0xe4, 0x1b, 0x05, 0x4e,
	0x89, 0x1f, 0x50, 0x24, 0xc5, 0xbf, 0xf0, 0x31, 0xa7, 0x5e, 0x90, 0x37, 0xc8, 0xa0, 0x30, 0x7d,
	0x4b, 0x45, 0x90, 0x7f, 0x50, 0x40, 0x4d, 0x7e, 0x6a, 0x90, 0xd5, 0x83, 0x52, 0x48, 0xf0, 0xfc,
	0x52, 0x2f, 0x66, 0x33, 0x42, 0xfc, 0xcb, 0x0c, 0x7f, 0x85, 0x5c, 0x90, 0x48, 0x3e, 0xee, 0x03,
	0x69, 0x5a, 0x95, 0x5b, 0xcf, 0x5e, 0x16, 0x94, 0xe7, 0x2f, 0x0b, 0xca, 0xef, 0x2f, 0x0b, 0xca,
	0xe3, 0xfd, 0x42, 0xcf, 0xf3, 0xfd, 0x42, 0xcf, 0x2f, 0xfb, 0x85, 0x9e, 0xb7, 0x97, 0xb8, 0xaa,
	0x3c, 0xce, 0xba, 0xf4, 0x8e, 0x6d, 0x19, 0x1d, 0x17, 0x8f, 0xd0, 0x09, 0x2b, 0xd0, 0xd7, 0xfa,
	0xd9, 0x9f, 0x74, 0x57, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x2d, 0x90, 0xa3, 0x96, 0x1e,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// AllBackingRiskParams queries risk params of all the backing pools.
	AllBackingRiskParams(ctx context.Context, in *QueryAllBackingRiskParamsRequest, opts ...grpc.CallOption) (*QueryAllBackingRiskParamsResponse, error)
	// AllCollateralRiskParams queries risk params of all the collateral pools.
	AllCollateralRiskParams(ctx context.Context, in *QueryAllCollateralRiskParamsRequest, opts ...grpc.CallOption) (*QueryAllCollateralRiskParamsResponse, error)
	// AllBackingPools queries all the backing pools.
	AllBackingPools(ctx context.Context, in *QueryAllBackingPoolsRequest, opts ...grpc.CallOption) (*QueryAllBackingPoolsResponse, error)
	// AllCollateralPools queries all the collateral pools.
	AllCollateralPools(ctx context.Context, in *QueryAllCollateralPoolsRequest, opts ...grpc.CallOption) (*QueryAllCollateralPoolsResponse, error)
	// BackingPool queries a backing pool.
	BackingPool(ctx context.Context, in *QueryBackingPoolRequest, opts ...grpc.CallOption) (*QueryBackingPoolResponse, error)
	// CollateralPool queries a collateral pool.
	CollateralPool(ctx context.Context, in *QueryCollateralPoolRequest, opts ...grpc.CallOption) (*QueryCollateralPoolResponse, error)
	// CollateralOfAccount queries the collateral of an account.
	CollateralOfAccount(ctx context.Context, in *QueryCollateralOfAccountRequest, opts ...grpc.CallOption) (*QueryCollateralOfAccountResponse, error)
	// TotalBacking queries the total backing.
	TotalBacking(ctx context.Context, in *QueryTotalBackingRequest, opts ...grpc.CallOption) (*QueryTotalBackingResponse, error)
	// TotalCollateral queries the total collateral.
	TotalCollateral(ctx context.Context, in *QueryTotalCollateralRequest, opts ...grpc.CallOption) (*QueryTotalCollateralResponse, error)
	// BackingRatio queries the backing ratio.
	BackingRatio(ctx context.Context, in *QueryBackingRatioRequest, opts ...grpc.CallOption) (*QueryBackingRatioResponse, error)
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// EstimateMintBySwapIn estimates input of minting by swap.
	EstimateMintBySwapIn(ctx context.Context, in *EstimateMintBySwapInRequest, opts ...grpc.CallOption) (*EstimateMintBySwapInResponse, error)
	// EstimateMintBySwapOut estimates output of minting by swap.
	EstimateMintBySwapOut(ctx context.Context, in *EstimateMintBySwapOutRequest, opts ...grpc.CallOption) (*EstimateMintBySwapOutResponse, error)
	// EstimateBurnBySwapIn estimates input of burning by swap.
	EstimateBurnBySwapIn(ctx context.Context, in *EstimateBurnBySwapInRequest, opts ...grpc.CallOption) (*EstimateBurnBySwapInResponse, error)
	// EstimateBurnBySwapOut estimates output of burning by swap.
	EstimateBurnBySwapOut(ctx context.Context, in *EstimateBurnBySwapOutRequest, opts ...grpc.CallOption) (*EstimateBurnBySwapOutResponse, error)
	// EstimateBuyBackingOut estimates output of buying backing assets.
	EstimateBuyBackingOut(ctx context.Context, in *EstimateBuyBackingOutRequest, opts ...grpc.CallOption) (*EstimateBuyBackingOutResponse, error)
	// EstimateSellBackingOut estimates output of selling backing assets.
	EstimateSellBackingOut(ctx context.Context, in *EstimateSellBackingOutRequest, opts ...grpc.CallOption) (*EstimateSellBackingOutResponse, error)
	// EstimateMintByCollateralIn estimates input of minting by collateral.
	EstimateMintByCollateralIn(ctx context.Context, in *EstimateMintByCollateralInRequest, opts ...grpc.CallOption) (*EstimateMintByCollateralInResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AllBackingRiskParams(ctx context.Context, in *QueryAllBackingRiskParamsRequest, opts ...grpc.CallOption) (*QueryAllBackingRiskParamsResponse, error) {
	out := new(QueryAllBackingRiskParamsResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/AllBackingRiskParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllCollateralRiskParams(ctx context.Context, in *QueryAllCollateralRiskParamsRequest, opts ...grpc.CallOption) (*QueryAllCollateralRiskParamsResponse, error) {
	out := new(QueryAllCollateralRiskParamsResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/AllCollateralRiskParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllBackingPools(ctx context.Context, in *QueryAllBackingPoolsRequest, opts ...grpc.CallOption) (*QueryAllBackingPoolsResponse, error) {
	out := new(QueryAllBackingPoolsResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/AllBackingPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllCollateralPools(ctx context.Context, in *QueryAllCollateralPoolsRequest, opts ...grpc.CallOption) (*QueryAllCollateralPoolsResponse, error) {
	out := new(QueryAllCollateralPoolsResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/AllCollateralPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BackingPool(ctx context.Context, in *QueryBackingPoolRequest, opts ...grpc.CallOption) (*QueryBackingPoolResponse, error) {
	out := new(QueryBackingPoolResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/BackingPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollateralPool(ctx context.Context, in *QueryCollateralPoolRequest, opts ...grpc.CallOption) (*QueryCollateralPoolResponse, error) {
	out := new(QueryCollateralPoolResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/CollateralPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollateralOfAccount(ctx context.Context, in *QueryCollateralOfAccountRequest, opts ...grpc.CallOption) (*QueryCollateralOfAccountResponse, error) {
	out := new(QueryCollateralOfAccountResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/CollateralOfAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalBacking(ctx context.Context, in *QueryTotalBackingRequest, opts ...grpc.CallOption) (*QueryTotalBackingResponse, error) {
	out := new(QueryTotalBackingResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/TotalBacking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalCollateral(ctx context.Context, in *QueryTotalCollateralRequest, opts ...grpc.CallOption) (*QueryTotalCollateralResponse, error) {
	out := new(QueryTotalCollateralResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/TotalCollateral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BackingRatio(ctx context.Context, in *QueryBackingRatioRequest, opts ...grpc.CallOption) (*QueryBackingRatioResponse, error) {
	out := new(QueryBackingRatioResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/BackingRatio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateMintBySwapIn(ctx context.Context, in *EstimateMintBySwapInRequest, opts ...grpc.CallOption) (*EstimateMintBySwapInResponse, error) {
	out := new(EstimateMintBySwapInResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/EstimateMintBySwapIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateMintBySwapOut(ctx context.Context, in *EstimateMintBySwapOutRequest, opts ...grpc.CallOption) (*EstimateMintBySwapOutResponse, error) {
	out := new(EstimateMintBySwapOutResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/EstimateMintBySwapOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateBurnBySwapIn(ctx context.Context, in *EstimateBurnBySwapInRequest, opts ...grpc.CallOption) (*EstimateBurnBySwapInResponse, error) {
	out := new(EstimateBurnBySwapInResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/EstimateBurnBySwapIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateBurnBySwapOut(ctx context.Context, in *EstimateBurnBySwapOutRequest, opts ...grpc.CallOption) (*EstimateBurnBySwapOutResponse, error) {
	out := new(EstimateBurnBySwapOutResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/EstimateBurnBySwapOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateBuyBackingOut(ctx context.Context, in *EstimateBuyBackingOutRequest, opts ...grpc.CallOption) (*EstimateBuyBackingOutResponse, error) {
	out := new(EstimateBuyBackingOutResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/EstimateBuyBackingOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateSellBackingOut(ctx context.Context, in *EstimateSellBackingOutRequest, opts ...grpc.CallOption) (*EstimateSellBackingOutResponse, error) {
	out := new(EstimateSellBackingOutResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/EstimateSellBackingOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateMintByCollateralIn(ctx context.Context, in *EstimateMintByCollateralInRequest, opts ...grpc.CallOption) (*EstimateMintByCollateralInResponse, error) {
	out := new(EstimateMintByCollateralInResponse)
	err := c.cc.Invoke(ctx, "/merlion.maker.v1.Query/EstimateMintByCollateralIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// AllBackingRiskParams queries risk params of all the backing pools.
	AllBackingRiskParams(context.Context, *QueryAllBackingRiskParamsRequest) (*QueryAllBackingRiskParamsResponse, error)
	// AllCollateralRiskParams queries risk params of all the collateral pools.
	AllCollateralRiskParams(context.Context, *QueryAllCollateralRiskParamsRequest) (*QueryAllCollateralRiskParamsResponse, error)
	// AllBackingPools queries all the backing pools.
	AllBackingPools(context.Context, *QueryAllBackingPoolsRequest) (*QueryAllBackingPoolsResponse, error)
	// AllCollateralPools queries all the collateral pools.
	AllCollateralPools(context.Context, *QueryAllCollateralPoolsRequest) (*QueryAllCollateralPoolsResponse, error)
	// BackingPool queries a backing pool.
	BackingPool(context.Context, *QueryBackingPoolRequest) (*QueryBackingPoolResponse, error)
	// CollateralPool queries a collateral pool.
	CollateralPool(context.Context, *QueryCollateralPoolRequest) (*QueryCollateralPoolResponse, error)
	// CollateralOfAccount queries the collateral of an account.
	CollateralOfAccount(context.Context, *QueryCollateralOfAccountRequest) (*QueryCollateralOfAccountResponse, error)
	// TotalBacking queries the total backing.
	TotalBacking(context.Context, *QueryTotalBackingRequest) (*QueryTotalBackingResponse, error)
	// TotalCollateral queries the total collateral.
	TotalCollateral(context.Context, *QueryTotalCollateralRequest) (*QueryTotalCollateralResponse, error)
	// BackingRatio queries the backing ratio.
	BackingRatio(context.Context, *QueryBackingRatioRequest) (*QueryBackingRatioResponse, error)
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// EstimateMintBySwapIn estimates input of minting by swap.
	EstimateMintBySwapIn(context.Context, *EstimateMintBySwapInRequest) (*EstimateMintBySwapInResponse, error)
	// EstimateMintBySwapOut estimates output of minting by swap.
	EstimateMintBySwapOut(context.Context, *EstimateMintBySwapOutRequest) (*EstimateMintBySwapOutResponse, error)
	// EstimateBurnBySwapIn estimates input of burning by swap.
	EstimateBurnBySwapIn(context.Context, *EstimateBurnBySwapInRequest) (*EstimateBurnBySwapInResponse, error)
	// EstimateBurnBySwapOut estimates output of burning by swap.
	EstimateBurnBySwapOut(context.Context, *EstimateBurnBySwapOutRequest) (*EstimateBurnBySwapOutResponse, error)
	// EstimateBuyBackingOut estimates output of buying backing assets.
	EstimateBuyBackingOut(context.Context, *EstimateBuyBackingOutRequest) (*EstimateBuyBackingOutResponse, error)
	// EstimateSellBackingOut estimates output of selling backing assets.
	EstimateSellBackingOut(context.Context, *EstimateSellBackingOutRequest) (*EstimateSellBackingOutResponse, error)
	// EstimateMintByCollateralIn estimates input of minting by collateral.
	EstimateMintByCollateralIn(context.Context, *EstimateMintByCollateralInRequest) (*EstimateMintByCollateralInResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) AllBackingRiskParams(ctx context.Context, req *QueryAllBackingRiskParamsRequest) (*QueryAllBackingRiskParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllBackingRiskParams not implemented")
}
func (*UnimplementedQueryServer) AllCollateralRiskParams(ctx context.Context, req *QueryAllCollateralRiskParamsRequest) (*QueryAllCollateralRiskParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllCollateralRiskParams not implemented")
}
func (*UnimplementedQueryServer) AllBackingPools(ctx context.Context, req *QueryAllBackingPoolsRequest) (*QueryAllBackingPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllBackingPools not implemented")
}
func (*UnimplementedQueryServer) AllCollateralPools(ctx context.Context, req *QueryAllCollateralPoolsRequest) (*QueryAllCollateralPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllCollateralPools not implemented")
}
func (*UnimplementedQueryServer) BackingPool(ctx context.Context, req *QueryBackingPoolRequest) (*QueryBackingPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackingPool not implemented")
}
func (*UnimplementedQueryServer) CollateralPool(ctx context.Context, req *QueryCollateralPoolRequest) (*QueryCollateralPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollateralPool not implemented")
}
func (*UnimplementedQueryServer) CollateralOfAccount(ctx context.Context, req *QueryCollateralOfAccountRequest) (*QueryCollateralOfAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollateralOfAccount not implemented")
}
func (*UnimplementedQueryServer) TotalBacking(ctx context.Context, req *QueryTotalBackingRequest) (*QueryTotalBackingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalBacking not implemented")
}
func (*UnimplementedQueryServer) TotalCollateral(ctx context.Context, req *QueryTotalCollateralRequest) (*QueryTotalCollateralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalCollateral not implemented")
}
func (*UnimplementedQueryServer) BackingRatio(ctx context.Context, req *QueryBackingRatioRequest) (*QueryBackingRatioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackingRatio not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) EstimateMintBySwapIn(ctx context.Context, req *EstimateMintBySwapInRequest) (*EstimateMintBySwapInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateMintBySwapIn not implemented")
}
func (*UnimplementedQueryServer) EstimateMintBySwapOut(ctx context.Context, req *EstimateMintBySwapOutRequest) (*EstimateMintBySwapOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateMintBySwapOut not implemented")
}
func (*UnimplementedQueryServer) EstimateBurnBySwapIn(ctx context.Context, req *EstimateBurnBySwapInRequest) (*EstimateBurnBySwapInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateBurnBySwapIn not implemented")
}
func (*UnimplementedQueryServer) EstimateBurnBySwapOut(ctx context.Context, req *EstimateBurnBySwapOutRequest) (*EstimateBurnBySwapOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateBurnBySwapOut not implemented")
}
func (*UnimplementedQueryServer) EstimateBuyBackingOut(ctx context.Context, req *EstimateBuyBackingOutRequest) (*EstimateBuyBackingOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateBuyBackingOut not implemented")
}
func (*UnimplementedQueryServer) EstimateSellBackingOut(ctx context.Context, req *EstimateSellBackingOutRequest) (*EstimateSellBackingOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateSellBackingOut not implemented")
}
func (*UnimplementedQueryServer) EstimateMintByCollateralIn(ctx context.Context, req *EstimateMintByCollateralInRequest) (*EstimateMintByCollateralInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateMintByCollateralIn not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AllBackingRiskParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBackingRiskParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllBackingRiskParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/AllBackingRiskParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllBackingRiskParams(ctx, req.(*QueryAllBackingRiskParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllCollateralRiskParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCollateralRiskParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllCollateralRiskParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/AllCollateralRiskParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllCollateralRiskParams(ctx, req.(*QueryAllCollateralRiskParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllBackingPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBackingPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllBackingPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/AllBackingPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllBackingPools(ctx, req.(*QueryAllBackingPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllCollateralPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCollateralPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllCollateralPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/AllCollateralPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllCollateralPools(ctx, req.(*QueryAllCollateralPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BackingPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBackingPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BackingPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/BackingPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BackingPool(ctx, req.(*QueryBackingPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollateralPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollateralPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollateralPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/CollateralPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollateralPool(ctx, req.(*QueryCollateralPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollateralOfAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollateralOfAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollateralOfAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/CollateralOfAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollateralOfAccount(ctx, req.(*QueryCollateralOfAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalBacking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalBackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalBacking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/TotalBacking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalBacking(ctx, req.(*QueryTotalBackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalCollateral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalCollateralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalCollateral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/TotalCollateral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalCollateral(ctx, req.(*QueryTotalCollateralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BackingRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBackingRatioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BackingRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/BackingRatio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BackingRatio(ctx, req.(*QueryBackingRatioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateMintBySwapIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateMintBySwapInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateMintBySwapIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/EstimateMintBySwapIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateMintBySwapIn(ctx, req.(*EstimateMintBySwapInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateMintBySwapOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateMintBySwapOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateMintBySwapOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/EstimateMintBySwapOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateMintBySwapOut(ctx, req.(*EstimateMintBySwapOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateBurnBySwapIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateBurnBySwapInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateBurnBySwapIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/EstimateBurnBySwapIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateBurnBySwapIn(ctx, req.(*EstimateBurnBySwapInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateBurnBySwapOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateBurnBySwapOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateBurnBySwapOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/EstimateBurnBySwapOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateBurnBySwapOut(ctx, req.(*EstimateBurnBySwapOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateBuyBackingOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateBuyBackingOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateBuyBackingOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/EstimateBuyBackingOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateBuyBackingOut(ctx, req.(*EstimateBuyBackingOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateSellBackingOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateSellBackingOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateSellBackingOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/EstimateSellBackingOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateSellBackingOut(ctx, req.(*EstimateSellBackingOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateMintByCollateralIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateMintByCollateralInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateMintByCollateralIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merlion.maker.v1.Query/EstimateMintByCollateralIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateMintByCollateralIn(ctx, req.(*EstimateMintByCollateralInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "merlion.maker.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllBackingRiskParams",
			Handler:    _Query_AllBackingRiskParams_Handler,
		},
		{
			MethodName: "AllCollateralRiskParams",
			Handler:    _Query_AllCollateralRiskParams_Handler,
		},
		{
			MethodName: "AllBackingPools",
			Handler:    _Query_AllBackingPools_Handler,
		},
		{
			MethodName: "AllCollateralPools",
			Handler:    _Query_AllCollateralPools_Handler,
		},
		{
			MethodName: "BackingPool",
			Handler:    _Query_BackingPool_Handler,
		},
		{
			MethodName: "CollateralPool",
			Handler:    _Query_CollateralPool_Handler,
		},
		{
			MethodName: "CollateralOfAccount",
			Handler:    _Query_CollateralOfAccount_Handler,
		},
		{
			MethodName: "TotalBacking",
			Handler:    _Query_TotalBacking_Handler,
		},
		{
			MethodName: "TotalCollateral",
			Handler:    _Query_TotalCollateral_Handler,
		},
		{
			MethodName: "BackingRatio",
			Handler:    _Query_BackingRatio_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "EstimateMintBySwapIn",
			Handler:    _Query_EstimateMintBySwapIn_Handler,
		},
		{
			MethodName: "EstimateMintBySwapOut",
			Handler:    _Query_EstimateMintBySwapOut_Handler,
		},
		{
			MethodName: "EstimateBurnBySwapIn",
			Handler:    _Query_EstimateBurnBySwapIn_Handler,
		},
		{
			MethodName: "EstimateBurnBySwapOut",
			Handler:    _Query_EstimateBurnBySwapOut_Handler,
		},
		{
			MethodName: "EstimateBuyBackingOut",
			Handler:    _Query_EstimateBuyBackingOut_Handler,
		},
		{
			MethodName: "EstimateSellBackingOut",
			Handler:    _Query_EstimateSellBackingOut_Handler,
		},
		{
			MethodName: "EstimateMintByCollateralIn",
			Handler:    _Query_EstimateMintByCollateralIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merlion/maker/v1/query.proto",
}

func (m *QueryAllBackingRiskParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBackingRiskParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBackingRiskParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllBackingRiskParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBackingRiskParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBackingRiskParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RiskParams) > 0 {
		for iNdEx := len(m.RiskParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RiskParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCollateralRiskParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCollateralRiskParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCollateralRiskParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllCollateralRiskParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCollateralRiskParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCollateralRiskParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RiskParams) > 0 {
		for iNdEx := len(m.RiskParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RiskParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBackingPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBackingPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBackingPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllBackingPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBackingPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBackingPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BackingPools) > 0 {
		for iNdEx := len(m.BackingPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BackingPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCollateralPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCollateralPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCollateralPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllCollateralPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCollateralPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCollateralPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollateralPools) > 0 {
		for iNdEx := len(m.CollateralPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CollateralPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBackingPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBackingPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBackingPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BackingDenom) > 0 {
		i -= len(m.BackingDenom)
		copy(dAtA[i:], m.BackingDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BackingDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBackingPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBackingPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBackingPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BackingPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCollateralPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollateralPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollateralPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollateralDenom) > 0 {
		i -= len(m.CollateralDenom)
		copy(dAtA[i:], m.CollateralDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollateralDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollateralPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollateralPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollateralPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CollateralPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCollateralOfAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollateralOfAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollateralOfAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollateralDenom) > 0 {
		i -= len(m.CollateralDenom)
		copy(dAtA[i:], m.CollateralDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollateralDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollateralOfAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollateralOfAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollateralOfAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AccountCollateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalBackingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalBackingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalBackingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalBackingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalBackingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalBackingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalBacking.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalCollateralRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalCollateralRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalCollateralRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalCollateralResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalCollateralResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalCollateralResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalCollateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBackingRatioRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBackingRatioRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBackingRatioRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBackingRatioResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBackingRatioResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBackingRatioResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUpdateBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastUpdateBlock))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.BackingRatio.Size()
		i -= size
		if _, err := m.BackingRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateMintBySwapInRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateMintBySwapInRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateMintBySwapInRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FullBacking {
		i--
		if m.FullBacking {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.BackingDenom) > 0 {
		i -= len(m.BackingDenom)
		copy(dAtA[i:], m.BackingDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BackingDenom)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.MintOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateMintBySwapInResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateMintBySwapInResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateMintBySwapInResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MintFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.LionIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BackingIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateMintBySwapOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateMintBySwapOutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateMintBySwapOutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FullBacking {
		i--
		if m.FullBacking {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.LionInMax.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BackingInMax.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateMintBySwapOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateMintBySwapOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateMintBySwapOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MintFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.MintOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.LionIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BackingIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateBurnBySwapInRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateBurnBySwapInRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateBurnBySwapInRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LionOutMax.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BackingOutMax.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateBurnBySwapInResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateBurnBySwapInResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateBurnBySwapInResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BurnFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.LionOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.BackingOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BurnIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateBurnBySwapOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateBurnBySwapOutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateBurnBySwapOutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BackingDenom) > 0 {
		i -= len(m.BackingDenom)
		copy(dAtA[i:], m.BackingDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BackingDenom)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.BurnIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateBurnBySwapOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateBurnBySwapOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateBurnBySwapOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BurnFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.LionOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BackingOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateBuyBackingOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateBuyBackingOutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateBuyBackingOutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BackingDenom) > 0 {
		i -= len(m.BackingDenom)
		copy(dAtA[i:], m.BackingDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BackingDenom)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.LionIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateBuyBackingOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateBuyBackingOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateBuyBackingOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BuybackFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BackingOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateSellBackingOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateSellBackingOutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateSellBackingOutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BackingIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateSellBackingOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateSellBackingOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateSellBackingOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SellbackFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.LionOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateMintByCollateralInRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateMintByCollateralInRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateMintByCollateralInRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LionInMax.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.CollateralDenom) > 0 {
		i -= len(m.CollateralDenom)
		copy(dAtA[i:], m.CollateralDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollateralDenom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.MintOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EstimateMintByCollateralInResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateMintByCollateralInResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateMintByCollateralInResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AccColl.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.PoolColl.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.TotalColl.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.MintFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.LionIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAllBackingRiskParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllBackingRiskParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RiskParams) > 0 {
		for _, e := range m.RiskParams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllCollateralRiskParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllCollateralRiskParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RiskParams) > 0 {
		for _, e := range m.RiskParams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllBackingPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllBackingPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BackingPools) > 0 {
		for _, e := range m.BackingPools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllCollateralPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllCollateralPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CollateralPools) > 0 {
		for _, e := range m.CollateralPools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBackingPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BackingDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBackingPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BackingPool.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCollateralPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollateralDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCollateralPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CollateralPool.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCollateralOfAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollateralDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCollateralOfAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AccountCollateral.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalBackingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalBackingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalBacking.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalCollateralRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalCollateralResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalCollateral.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBackingRatioRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBackingRatioResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BackingRatio.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.LastUpdateBlock != 0 {
		n += 1 + sovQuery(uint64(m.LastUpdateBlock))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *EstimateMintBySwapInRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MintOut.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.BackingDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FullBacking {
		n += 2
	}
	return n
}

func (m *EstimateMintBySwapInResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BackingIn.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LionIn.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MintFee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *EstimateMintBySwapOutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BackingInMax.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LionInMax.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.FullBacking {
		n += 2
	}
	return n
}

func (m *EstimateMintBySwapOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BackingIn.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LionIn.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MintOut.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MintFee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *EstimateBurnBySwapInRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BackingOutMax.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LionOutMax.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *EstimateBurnBySwapInResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BurnIn.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BackingOut.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LionOut.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BurnFee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *EstimateBurnBySwapOutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BurnIn.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.BackingDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EstimateBurnBySwapOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BackingOut.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LionOut.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BurnFee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *EstimateBuyBackingOutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LionIn.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.BackingDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EstimateBuyBackingOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BackingOut.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BuybackFee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *EstimateSellBackingOutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BackingIn.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *EstimateSellBackingOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LionOut.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.SellbackFee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *EstimateMintByCollateralInRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.MintOut.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.CollateralDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.LionInMax.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *EstimateMintByCollateralInResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LionIn.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MintFee.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalColl.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.PoolColl.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.AccColl.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAllBackingRiskParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBackingRiskParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBackingRiskParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBackingRiskParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBackingRiskParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBackingRiskParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RiskParams = append(m.RiskParams, BackingRiskParams{})
			if err := m.RiskParams[len(m.RiskParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCollateralRiskParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCollateralRiskParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCollateralRiskParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCollateralRiskParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCollateralRiskParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCollateralRiskParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RiskParams = append(m.RiskParams, CollateralRiskParams{})
			if err := m.RiskParams[len(m.RiskParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBackingPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBackingPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBackingPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBackingPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBackingPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBackingPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackingPools = append(m.BackingPools, PoolBacking{})
			if err := m.BackingPools[len(m.BackingPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCollateralPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCollateralPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCollateralPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCollateralPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCollateralPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCollateralPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralPools = append(m.CollateralPools, PoolCollateral{})
			if err := m.CollateralPools[len(m.CollateralPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBackingPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBackingPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBackingPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackingDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBackingPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBackingPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBackingPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackingPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollateralPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollateralPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollateralPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollateralPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollateralPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollateralPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollateralOfAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollateralOfAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollateralOfAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollateralOfAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollateralOfAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollateralOfAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccountCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalBackingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalBackingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalBackingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalBackingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalBackingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalBackingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBacking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBacking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalCollateralRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalCollateralRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalCollateralRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalCollateralResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalCollateralResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalCollateralResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBackingRatioRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBackingRatioRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBackingRatioRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBackingRatioResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBackingRatioResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBackingRatioResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackingRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateBlock", wireType)
			}
			m.LastUpdateBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdateBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateMintBySwapInRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateMintBySwapInRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateMintBySwapInRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackingDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullBacking", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullBacking = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateMintBySwapInResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateMintBySwapInResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateMintBySwapInResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackingIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LionIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LionIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateMintBySwapOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateMintBySwapOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateMintBySwapOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingInMax", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackingInMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LionInMax", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LionInMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullBacking", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullBacking = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateMintBySwapOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateMintBySwapOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateMintBySwapOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackingIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LionIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LionIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateBurnBySwapInRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateBurnBySwapInRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateBurnBySwapInRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingOutMax", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackingOutMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LionOutMax", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LionOutMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateBurnBySwapInResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateBurnBySwapInResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateBurnBySwapInResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackingOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LionOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LionOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateBurnBySwapOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateBurnBySwapOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateBurnBySwapOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackingDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateBurnBySwapOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateBurnBySwapOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateBurnBySwapOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackingOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LionOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LionOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateBuyBackingOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateBuyBackingOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateBuyBackingOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LionIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LionIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackingDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateBuyBackingOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateBuyBackingOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateBuyBackingOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackingOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuybackFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuybackFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateSellBackingOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateSellBackingOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateSellBackingOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackingIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateSellBackingOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateSellBackingOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateSellBackingOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LionOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LionOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellbackFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellbackFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateMintByCollateralInRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateMintByCollateralInRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateMintByCollateralInRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LionInMax", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LionInMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateMintByCollateralInResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateMintByCollateralInResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateMintByCollateralInResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LionIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LionIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalColl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalColl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolColl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolColl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccColl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccColl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
