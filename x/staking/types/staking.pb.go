// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: merlion/staking/v1/staking.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VeValidator struct {
	OperatorAddress   string                                 `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	VeTokens          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=ve_tokens,json=veTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ve_tokens"`
	VeDelegatorShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=ve_delegator_shares,json=veDelegatorShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ve_delegator_shares"`
}

func (m *VeValidator) Reset()         { *m = VeValidator{} }
func (m *VeValidator) String() string { return proto.CompactTextString(m) }
func (*VeValidator) ProtoMessage()    {}
func (*VeValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca92d6e009ad29a, []int{0}
}
func (m *VeValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VeValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VeValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VeValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VeValidator.Merge(m, src)
}
func (m *VeValidator) XXX_Size() int {
	return m.Size()
}
func (m *VeValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_VeValidator.DiscardUnknown(m)
}

var xxx_messageInfo_VeValidator proto.InternalMessageInfo

type VeDelegation struct {
	DelegatorAddress string     `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	ValidatorAddress string     `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	VeShares         []VeShares `protobuf:"bytes,3,rep,name=ve_shares,json=veShares,proto3" json:"ve_shares"`
}

func (m *VeDelegation) Reset()         { *m = VeDelegation{} }
func (m *VeDelegation) String() string { return proto.CompactTextString(m) }
func (*VeDelegation) ProtoMessage()    {}
func (*VeDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca92d6e009ad29a, []int{1}
}
func (m *VeDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VeDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VeDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VeDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VeDelegation.Merge(m, src)
}
func (m *VeDelegation) XXX_Size() int {
	return m.Size()
}
func (m *VeDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_VeDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_VeDelegation proto.InternalMessageInfo

type VeShares struct {
	VeId               uint64                                 `protobuf:"varint,1,opt,name=ve_id,json=veId,proto3" json:"ve_id,omitempty"`
	TokensMayUnsettled github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=tokens_may_unsettled,json=tokensMayUnsettled,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokens_may_unsettled"`
	Shares             github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=shares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"shares"`
}

func (m *VeShares) Reset()         { *m = VeShares{} }
func (m *VeShares) String() string { return proto.CompactTextString(m) }
func (*VeShares) ProtoMessage()    {}
func (*VeShares) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca92d6e009ad29a, []int{2}
}
func (m *VeShares) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VeShares) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VeShares.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VeShares) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VeShares.Merge(m, src)
}
func (m *VeShares) XXX_Size() int {
	return m.Size()
}
func (m *VeShares) XXX_DiscardUnknown() {
	xxx_messageInfo_VeShares.DiscardUnknown(m)
}

var xxx_messageInfo_VeShares proto.InternalMessageInfo

func (m *VeShares) GetVeId() uint64 {
	if m != nil {
		return m.VeId
	}
	return 0
}

func init() {
	proto.RegisterType((*VeValidator)(nil), "merlion.staking.v1.VeValidator")
	proto.RegisterType((*VeDelegation)(nil), "merlion.staking.v1.VeDelegation")
	proto.RegisterType((*VeShares)(nil), "merlion.staking.v1.VeShares")
}

func init() { proto.RegisterFile("merlion/staking/v1/staking.proto", fileDescriptor_0ca92d6e009ad29a) }

var fileDescriptor_0ca92d6e009ad29a = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0x8e, 0xb7, 0x32, 0x75, 0x1e, 0x12, 0xab, 0xb7, 0x43, 0x35, 0xa1, 0x74, 0xda, 0x01, 0x0d,
	0x4d, 0x8b, 0x55, 0xb8, 0x71, 0x41, 0x54, 0x13, 0x52, 0x85, 0xb8, 0x14, 0xe8, 0x81, 0x03, 0xc1,
	0x89, 0x7f, 0x65, 0x51, 0x13, 0xbb, 0x8a, 0x3d, 0x8b, 0xf2, 0x04, 0x1c, 0x79, 0x84, 0xbd, 0x03,
	0x2f, 0x31, 0x6e, 0x3b, 0x22, 0x0e, 0x13, 0x6a, 0x2f, 0xdc, 0x78, 0x05, 0x14, 0x3b, 0x0e, 0xa0,
	0x9e, 0x80, 0x53, 0xfe, 0xfc, 0xdf, 0xe7, 0xcf, 0xff, 0xff, 0x7d, 0x09, 0x3e, 0x2c, 0xa1, 0x2a,
	0x72, 0x29, 0xa8, 0xd2, 0x6c, 0x96, 0x8b, 0x8c, 0x9a, 0xa1, 0x2f, 0xa3, 0x79, 0x25, 0xb5, 0x24,
	0xa4, 0x61, 0x44, 0xbe, 0x6d, 0x86, 0x07, 0xfb, 0x99, 0xcc, 0xa4, 0x85, 0x69, 0x5d, 0x39, 0xe6,
	0x41, 0x98, 0x4a, 0x55, 0x4a, 0x45, 0x13, 0xa6, 0x80, 0x9a, 0x61, 0x02, 0x9a, 0x0d, 0x69, 0x2a,
	0x73, 0xe1, 0xf0, 0xa3, 0x1f, 0x08, 0xef, 0x4c, 0x61, 0xca, 0x8a, 0x9c, 0x33, 0x2d, 0x2b, 0x72,
	0x1f, 0xef, 0xca, 0x39, 0x54, 0x75, 0x1d, 0x33, 0xce, 0x2b, 0x50, 0xaa, 0x8f, 0x0e, 0xd1, 0xf1,
	0xf6, 0xe4, 0x8e, 0xef, 0x3f, 0x71, 0x6d, 0xf2, 0x0c, 0x6f, 0x1b, 0x88, 0xb5, 0x9c, 0x81, 0x50,
	0xfd, 0x8d, 0x9a, 0x33, 0x8a, 0xae, 0x6e, 0x06, 0xc1, 0xd7, 0x9b, 0xc1, 0xbd, 0x2c, 0xd7, 0xe7,
	0x17, 0x49, 0x94, 0xca, 0x92, 0x36, 0x03, 0xb8, 0xc7, 0xa9, 0xe2, 0x33, 0xaa, 0x17, 0x73, 0x50,
	0xd1, 0x58, 0xe8, 0x49, 0xd7, 0xc0, 0x4b, 0x7b, 0x9e, 0xbc, 0xc1, 0x7b, 0x06, 0x62, 0x0e, 0x05,
	0x64, 0xf6, 0x6e, 0x75, 0xce, 0x2a, 0x50, 0xfd, 0xcd, 0xbf, 0x96, 0x3d, 0x83, 0x74, 0xd2, 0x33,
	0x70, 0xe6, 0x95, 0x5e, 0x58, 0xa1, 0x47, 0xdd, 0x0f, 0x97, 0x83, 0xe0, 0xfb, 0xe5, 0x20, 0x38,
	0xfa, 0x84, 0xf0, 0xed, 0xa9, 0xc7, 0x73, 0x29, 0xc8, 0x09, 0xee, 0xfd, 0xba, 0xf7, 0xcf, 0x9d,
	0x77, 0x5b, 0xc0, 0x2f, 0x7d, 0x82, 0x7b, 0xc6, 0x9b, 0xd5, 0x92, 0x37, 0x1c, 0xb9, 0x05, 0x3c,
	0xf9, 0xb1, 0x75, 0xa8, 0x5d, 0x65, 0xf3, 0x78, 0xe7, 0xc1, 0xdd, 0x68, 0x3d, 0xba, 0x68, 0x0a,
	0x6e, 0xca, 0x51, 0xa7, 0x5e, 0xb4, 0x76, 0x65, 0x6d, 0xea, 0xcf, 0x08, 0x77, 0x3d, 0x8d, 0xec,
	0xe1, 0x5b, 0x06, 0xe2, 0x9c, 0xdb, 0x29, 0x3b, 0x93, 0x8e, 0x81, 0x31, 0x27, 0x6f, 0xf1, 0xbe,
	0xcb, 0x22, 0x2e, 0xd9, 0x22, 0xbe, 0x10, 0x0a, 0xb4, 0x2e, 0x80, 0xff, 0x63, 0x32, 0xc4, 0x69,
	0x3d, 0x67, 0x8b, 0x57, 0x5e, 0x89, 0x3c, 0xc5, 0x5b, 0xff, 0x15, 0x4b, 0x73, 0x7a, 0x34, 0xbe,
	0x5a, 0x86, 0xe8, 0x7a, 0x19, 0xa2, 0x6f, 0xcb, 0x10, 0x7d, 0x5c, 0x85, 0xc1, 0xf5, 0x2a, 0x0c,
	0xbe, 0xac, 0xc2, 0xe0, 0x35, 0xfd, 0x4d, 0xa9, 0xf1, 0xe9, 0xf4, 0xbd, 0x14, 0xe0, 0x5f, 0xe8,
	0xbb, 0xf6, 0x9f, 0xb0, 0xb2, 0xc9, 0x96, 0xfd, 0x8a, 0x1f, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0x1a, 0x57, 0x6f, 0x40, 0x33, 0x03, 0x00, 0x00,
}

func (m *VeValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VeValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VeValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.VeDelegatorShares.Size()
		i -= size
		if _, err := m.VeDelegatorShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.VeTokens.Size()
		i -= size
		if _, err := m.VeTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VeDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VeDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VeDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VeShares) > 0 {
		for iNdEx := len(m.VeShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VeShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VeShares) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VeShares) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VeShares) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TokensMayUnsettled.Size()
		i -= size
		if _, err := m.TokensMayUnsettled.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VeId != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.VeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovStaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VeValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = m.VeTokens.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.VeDelegatorShares.Size()
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func (m *VeDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	if len(m.VeShares) > 0 {
		for _, e := range m.VeShares {
			l = e.Size()
			n += 1 + l + sovStaking(uint64(l))
		}
	}
	return n
}

func (m *VeShares) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VeId != 0 {
		n += 1 + sovStaking(uint64(m.VeId))
	}
	l = m.TokensMayUnsettled.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.Shares.Size()
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func sovStaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStaking(x uint64) (n int) {
	return sovStaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VeValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VeValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VeValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VeTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VeTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VeDelegatorShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VeDelegatorShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VeDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VeDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VeDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VeShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VeShares = append(m.VeShares, VeShares{})
			if err := m.VeShares[len(m.VeShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VeShares) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VeShares: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VeShares: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VeId", wireType)
			}
			m.VeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensMayUnsettled", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokensMayUnsettled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStaking = fmt.Errorf("proto: unexpected end of group")
)
